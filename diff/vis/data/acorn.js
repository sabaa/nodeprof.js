let __diffs = [{"caller":{"fileName":"run.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/test/run.js","start":{"line":"1","column":"62"},"end":{"line":"119","column":"5"},"code":"lementById('log');ge);.duration + \"ms; \" +ed.\"));"},"callee":{"fileName":"run.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/test/run.js","start":{"line":"1","column":"63"},"end":{"line":"119","column":"2"},"code":"ementById('log');e);duration + \"ms; \" +d.\"));"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"1","column":"62"},"end":{"line":"5001","column":"4"},"code":"' ? factory(exports) :ts'], factory) :xtends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",ed public static yield\",ger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";port super\"e Theseave ad8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fef\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7c6\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab67\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";tifierStartChars + \"]\");rStartChars + nonASCIIidentifierChars + \"]\");ll; of the. Thesents anThey were,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,477,28,11,0,9,21,155,22,13,52,76,44,33,24,27,35,30,0,12,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,0,33,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,0,161,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,270,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,754,9486,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,15,7472,3104,541];,2,1,6,3,41,2,5,0,166,1,574,3,9,9,525,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,4,9,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,232,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,792487,239];hers is.tifierStart.test(String.fromCharCode(code)) }tifier.test(String.fromCharCode(code)) } isInAstralSet(code, astralIdentifierCodes)e objectsut a up.ke themn regularthat canould be aends ather cancanportantlow})pr: true};r: true}), true}), true}),tsExpr: true}),help theties is a binaryr postfixh act asld result),true}),ue, startsExpr: true}),rue, startsExpr: true}),, prefix: true, startsExpr: true}),}),artsExpr: true}),Expr: true}),artsExpr: true})ingle(code === 0x2028 || code === 0x2029))u3000\\ufeff]/;\") {}youtert refersguree. Must ber 10et ofhe defaultsed in.s globalrations.alled passedons` is` object but forrsion >= 5.urn this oned wordsred anined toat the top-level scope,ilets with(withd to thellame`. Notewillstart,` is aomment,`end` are comment. arert andcall thel state.rded inther thano add a`[start,tion to745678ST byhep) nodee sourced byefaultOptions[opt]; }(token); };mment); }) {dLoc); }rator ? SCOPE_GENERATOR : 0)of a bindingatch binding bound inside the function>= 6 ? 6 : options.sourceType === \"module\" ? \"5module\" : 5]);ait\"; }eservedWords.strict; + \" \" + reservedWords.strictBind);ord words with- 1) + 1;t(lineBreak).length;pe, the valuecticowed in apos);nxist in default parameters..slice(0, 2) === \"#!\").js) },inGenerator: { configurable: true },inAsync: { configurable: true },allowSuper: { configurable: true },allowDirectSuper: { configurable: true },treatFunctionsAsVar: { configurable: true } };his.currentVarScope().flags & SCOPE_FUNCTION) > 0 };this.currentVarScope().flags & SCOPE_GENERATOR) > 0 };.currentVarScope().flags & SCOPE_ASYNC) > 0 };his.currentThisScope().flags & SCOPE_SUPER) > 0 };urn (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0 };return this.treatFunctionsAsVarInScope(this.currentScope()) };nction () { return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0 };i](cls); }t, pos, options) {rs );rue }ven !this.containsEsc.position.tart))his.lastTokEndLoc); }owed tohis.unexpected(); }s.lastTokStartLoc); }herwise,ken\");Assign) {Comma, \"Comma is not permitted after the rest element\"); }zedAssign : refDestructuringErrors.parenthesizedBind;esized pattern\"); } andThrow) {ign;to >= 0 }nments are valid only in destructuring patterns\"); }_proto__ property\"); }his.awaitPos)) a default value\"); } a default value\"); }rExpression\"r ofy takes aappendedrts); i < list.length; i += 1)tart, (\"Export '\" + name + \"' is not defined\"));h\"};et\")) { return false }.charCodeAt(next); (or only aen only a Statementookahead fore)) { ++pos; }ue }sync\"))&&is.input.charAt(next + 8)))arse aus token{ theybit ofeBreakContinueStatement(node, starttype.keyword)node) labeled statementt that is the soletext !== \"label\")) && this.options.ecmaVersion >= 6) { this.unexpected(); }t)))s._import) {nput.charCodeAt(next);arseExpression()) } only appear at the top level\"); } appear only with 'sourceType: module'\"); }ode) : this.parseExport(node, exports)word or ant. Weif theeabel.xt)();er\" && this.eat(types.colon))expr, context) } }{e.label = null; } {p\")) { break }nsyntactic \" + keyword); } \"ContinueStatement\")/`of`t `var`seeck inits), itsync || (!this.inFunction && this.options.allowAwaitOutsideFunction)) && this.eatContextual(\"await\")) ? this.lastTokStart : -1;t || isLet) {his.value;on >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1) {ors);>= 6 && this.isContextual(\"of\"))) {);rationPosition) {tionPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync)on-strict modeent(\"if\") : null;unction)); }h thee.argument = null; }olon(); }aseently {efault) {kStart, \"Multiple default clauses\"); }.start)))row\"); } empty.CH : BIND_LEXICAL);); }ck() : null;se\"); }ct mode\"); }, context) {i$1 += 1)s already declared\");s._switch ? \"switch\" : null;odetart: this.start});(\"label\") === -1 ? context + \"label\" : context : \"label\"); `\"useorcope = true;ment orxpression();rseExpression();claration may not have an initializer\")oop\");eMaybeAssign(); \"ForOfStatement\")n || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\")))) {(this.type === types._in || this.isContextual(\"of\")))) { require an initialization value\");eclarator\"));LEXICAL, false);LLABLE_ID = 4;elled with falseionBody, isAsync) {sion >= 6 && !isAsync) {NG_STATEMENT))== types.name ? null : this.parseIdent();mode, then it isrwise, the bindingeetor || node.async) ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION); }Pos, oldAwaitIdentPos = this.awaitIdentPos;);) : null; } ? \"FunctionDeclaration\" : \"FunctionExpression\")this.options.ecmaVersion >= 8);= null);nd === \"constructor\") {plicate constructor in the same class\"); }ion\" : \"ClassExpression\")his$1.canInsertSemicolon())) { return true }nc\", true)) {at(types.star);Identifier\" && key.name === \"constructor\" ||)) {Constructor can't have get/set modifier\"); }an't be a generator\"); } be an async method\"); }key.name === \"prototype\") {operty named prototype\");sDirectSuper);== 0)uld have no params\"); }== 1)uld have exactly one param\"); }=== \"RestElement\")Setter cannot use rest params\"); }nc, allowsDirectSuper) {owsDirectSuper);prSubscripts() : null;;AsyncFunction())) {TEMENT | FUNC_NULLABLE_ID, false, isAsync);\");)declarations); } node.declaration.id.start); }}th; i += 1) {e + \"'\"); }h; i += 1).length; i$1 += 1) {ent(true) : node.local;rted.start);prAtom() : this.unexpected();r\"));ifier\"));ve prologues.Candidate(statements[i]); ++i) {slice(1, -1);tement.start] === \"'\")ingErrors) {ntifier inside an async function\"); }(refDestructuringErrors, true); }th; i += 1) {wait]ntTarget| is an |ArrayLiteral| or an |ObjectLiteral|.gument.type === \"ObjectPattern\")\");, \"Object pattern can't contain getter or setter\"); }(refDestructuringErrors, true); }nnot have a default value\"); }, \"Only '=' operator can be used for specifying default value.\"); }ructuringErrors);ors(refDestructuringErrors, true); } && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")ringErrors);identifier.name) true, true);ailingComma) {a(close)) {t, \"Comma is not permitted after the rest element\"); }artLoc); {{ return left }signedor 'const') binding illegal identifiers, but not for duplicate references{)d as a lexically bound name\"); }pr.name))inding \" : \"Assigning to \") + expr.name + \" in strict mode\"); }clash\"); }UTSIDE) { this.declareName(expr.name, bindingType, expr.start); }inding member expression\"); }; i += 1)length; i$1 += 1) {hes); });es);gning to\") + \" rvalue\");s for allh —repeated.ringErrors) {dElement\")op.method || prop.shorthand))s.doubleProto < 0) { refDestructuringErrors.doubleProto = key.start; }on 6.0on of __proto__ property\"); } || other.set;roperty\"); } top toost of parse,, wrapnode. toressions)orthandsionses) {rors);his.parseMaybeAssign(noIn, refDestructuringErrors)); }ns ofrs, afterLeftParse) {fteroldTrailingComma = -1, oldShorthandAssign = -1;sign;;sign;turingErrors.trailingComma = refDestructuringErrors.shorthandAssign = -1;e)ingErrors);ft, startPos, startLoc); }left, false, refDestructuringErrors) : left;(refDestructuringErrors); }ecause shorthand default was used correctlys(refDestructuringErrors, true); }esizedAssign = oldParenAssign; }ingComma = oldTrailingComma; }rthandAssign = oldShorthandAssign; }gErrors) {); return expr }{alse); return expr }ctionExpression\" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn)ingtop andnters anparsing.c, minPrec, noIn) {ype === types.logicalAND;l, false), startPos, startLoc, prec, noIn);c, left, right, op, logical);Loc, minPrec, noIn), op, logical) {\" : \"BinaryExpression\")Unary) {;.inFunction && this.options.allowAwaitOutsideFunction))) {es.incDec;);ariable in strict mode\"); }\" : \"UnaryExpression\");; { return expr } {s.parseMaybeUnary(null, false), \"**\", false) } {ression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\"; skipArrowSubscripts) { return expr }c);ession\") {t.start) { refDestructuringErrors.parenthesizedAssign = -1; }start) { refDestructuringErrors.parenthesizedBind = -1; }oCalls) {se.type === \"Identifier\" && base.name === \"async\" &&lon() && this.input.slice(base.start, base.end) === \"async\";Loc, noCalls, maybeAsyncArrow);Expression\") { return element }Calls, maybeAsyncArrow) {s.parseIdent(this.options.allowReserved !== \"never\");ldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;tions.ecmaVersion >= 8, false, refDestructuringErrors);is.eat(types.arrow)) {);' as identifier inside an async function\"); }rtPos, startLoc), exprList, true));tPos;n\");is anction` or, `[]`,on, thexp instead.rt;ethod\"); }r)uctor of a subclass\"); }ketL && this.type !== types.parenL)ntainsEsc = this.containsEsc;.name === \"async\" && !this.canInsertSemicolon() && this.eat(types._function)), startLoc), 0, false, true) }(startPos, startLoc), [id], false) }nc\" && this.type === types.name && !containsEsc) {row))tartPos, startLoc), [id], true)s};pe === types._true;guishExpression(canBeArrow); !this.isSimpleAssignTarget(expr))t; } }, true, refDestructuringErrors);t allowed in import()\");ode.bigint = node.raw.slice(0, -1); }ow) { allowTrailingComma = this.options.ecmaVersion >= 8;artLoc;ldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;ested in parameterses.parenR, true)) {ding()));art, \"Comma is not permitted after the rest element\"); }ucturingErrors, this.parseParenItem));oc;t(types.arrow)) {);xprList)this.lastTokStart); });Pos, innerEndLoc);rList) {s, startLoc), exprList)rgument toat least,e noCalls the {y valid meta property for new is new.target\"); }nly be used in functions\"); }port = this.type === types._import;startPos, startLoc, true);{ExprList(types.parenR, this.options.ecmaVersion >= 8, false); }e in untagged template literal\");\\r\\n?/g, \"\\n\"),sTagged = false;d});terminated template literal\"); }Tagged: isTagged}));& prop.key.name === \"async\" && this.type === types.string || this.type === types.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types.star)) &&start)) {ngComma(types.braceR)) { break }ngErrors);efDestructuringErrors); }: \"ObjectExpression\")rors) {os, startLoc;sis)) {r the rest element\");ignable()`.s) {tart;rt;turingErrors);. && refDestructuringErrors.trailingComma < 0) {n >= 8 && !isGenerator && this.isAsyncProp(prop)) {(types.star);sync, startPos, startLoc, refDestructuringErrors, containsEsc);ator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {)art, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors); types.parenL) {d && prop.key.type === \"Identifier\" &&\"set\") &&pes.braceR)) {no params\"); }exactly one param\"); }=== \"RestElement\") \"Setter cannot use rest params\"); }d && prop.key.type === \"Identifier\") {c, prop.key);rors) {rt; }c, prop.key);= types.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== \"never\")e.expression = false; }}ctSuper) { oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));this.options.ecmaVersion >= 8); {Pos, oldAwaitIdentPos = this.awaitIdentPos;OW);nc; }Method) {.braceL;isSimpleParamList(node.params);ument nameswords `eval`trict' directive in function with non-simple parameter list\"); }unction` error is thrownith one of the params.rrowFunction && !isMethod && this.isSimpleParamList(node.params));in strict mode, e.g. 'eval'D_OUTSIDE); }uch as using \"eval\" 1): nameHash);s them asand with neededlowEmpty, refDestructuringErrors) {se)) { break }ma && refDestructuringErrors.trailingComma < 0); }rors);dentifier inside a generator\"); }dentifier inside an async function\"); }\")); }turn }servedWords;wait' outside an async function\"); }\"' is reserved\"));rue (usedintoo this.context.word is consumed as an identifier such as a property name.because the context-managing code already ignored the keyword &&input.charCodeAt(this.lastTokStart) !== 46)) { || (this.type !== types.star && !this.type.startsExpr)) {s. Itdicateendth thattart)opecal scope in the current lexical scopeables in the current scope in order to detect duplicate variable names.clarations are declarations.& (scope.flags & SCOPE_TOP)functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;scope$2.var.indexOf(name) > -1; }flags & SCOPE_SIMPLE_CATCH) && scope$3.lexical[0] === name) ||e$3.functions.indexOf(name) > -1) { '\" + name + \"' has already been declared\")); } strict.per.property`, and `super[property]`.ROW)) { return scope }d, this.lastTokEndLoc)ear at aeSpace, override, generator) {turn p.tryReadTemplateToken(); }), true),e)t)t || parent === types$1.b_expr)) we areext` for && this.exprAllowed)d, this.start)) }| prevType === types.eof || prevType === types.parenR || prevType === types.arrow)|| prevType === types.name)unction() { \"function\") {_stat : types$1.b_expr);=== types._for || prevType === types._with || prevType === types._while;s$1.p_expr);= function(prevType) {vType !== types._else &&nput.slice(this.lastTokEnd, this.start))) &&ceL) && this.curContext() === types$1.b_stat))ot) {) ECMAScripttbody > tr > td:nth-child(1) code').map(el => el.innerText)habetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS\";nded_Pictographic\";unctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu\";roglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb\";unjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd\";m Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho\";] + \" \" + unicodeGeneralCategoryValues),alues),parser) {6 ? \"uy\" : \"\") + (parser.options.ecmaVersion >= 9 ? \"s\" : \"\");>= 11 ? 11 : parser.options.ecmaVersion];rt, pattern, flags) { >= 6; >= 9;sage) {r expression: /\" + (this.source) + \"/: \" + message));ndex (it combines a surrogate pair).be a part of a surrogate pair).>= l) {dex (i) {>= l) {() {ead () {() {3FF) + 0xDC00)te RegExp.lag\"); flag\");te RegExp. the result ofsymbol *SyntaxError*y elements of _P_onditions exist.ate.groupNames.length > 0) {ttern {.length; i += 1) {sjunctionternativeTerm(state))nexB-Terme.ast eaten AssertiontQuantifier(state)) {exp_eatExtendedAtom(state)) {nexB-Assertion { {antifierantifierPrefix{{Digits(state)) {g/ecma-262/8.0/#sec-termr\");om {nexB-ExtendedAtomnexB-InvalidBracedQuantifierntaxCharactertternCharacterr(ch)) {nexB-ExtendedPatternCharacter== -1) { the eaten name..eat(0x3E /* > */)) { the eaten name.tValue);IntValue);capeSequence(state)) { || ch === 0x5F /* _ */capeSequence(state)) {|| ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */nexB-AtomEscapeorg/ecma-262/8.0/#sec-atomescapenexB-CharacterEscapeence(state)) ||tate.lookahead())) {ntrolEscapentrolLettergExpUnicodeEscapeSequence) {) {*/) && this.regexp_eatFixedHexDigits(state, 4)) {(trail - 0xDC00) + 0x10000;nexB-IdentityEscape /* k */)) {cimalEscape0x30 /* 0 */);= 0x39 /* 9 */)aracterClassEscape&&ate) {t(0x3D /* = */)) {, name, value); {ameOrValue);state, name, value) {tate, nameOrValue) {))) {())) {it(ch)ate) {aracterClassression\" error before.assRangesnemptyClassRangesnemptyClassRangesNoDash(state)) {);assAtomassAtomNoDashnexB-ClassEscapenexB-ClassControlLetterxEscapeSequencecimalDigits30 /* 0 */);xDigits(ch);nexB-LegacyOctalEscapeSequence{ntValue;talDigitx4DigitsxDigitorg/ecma-262/8.0/#prod-HexEscapeSequence(ch);, tokens only.); }o pleaserelatedSpace(); }ition(); }ken(types.eof) }s) }in) || code === 92 /* '\\' */)();.pos += 2);comment\"); }ndex < this.pos) { 2, end), start, this.pos,();+ startSkip, this.pos), start, this.pos,Skipspace.test(String.fromCharCode(ch))) {ce aftertheion(); }ken. It rathernlinedue) } === 46) { // 46 = dot '.'p() }}=== 42) {e + 1) }types.logicalOR : types.logicalAND, 2) }}es.bitwiseAND, 1)}eAt(this.pos + 2) === 62 &&.slice(this.lastTokEnd, this.pos)))) {}2) === 62 ? 3 : 2;turn this.finishOp(types.assign, size + 1) }input.charCodeAt(this.pos + 2) === 45 &&ted as a line commenthis.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }n >= 6) { // '=>'x, 1)ollowed))tL)tR)L)R)on)xNumber(16) } // '0x', '0X' - hex numberdixNumber(8) } // '0o', '0O' - octal numberixNumber(2) } // '0b', '0B' - binary numbertale 55: case 56: case 57: // 1-9' (61) isof a tokenToString$1(code) + \"'\");\"Unterminated regular expression\"); }ed regular expression\"); }egExpValidationState(this));Exp object.fad44de9cef372a2eacd527b1c/es5.md#regexpliteralflags: flags, value: value})digitsven, thisdigits.++i) { 0); // 0-9 !== len) { return null }umber in radix \" + radix); }At(this.pos) === 110) {.slice(start, this.pos)) : null; this.raise(this.pos, \"Identifier directly after number\"); }.aise(start, \"Invalid number\"); }t(start) === 48;mber\"); }))) { octal = false; }>= 11 && next === 110) {1) : null;.raise(this.pos, \"Identifier directly after number\"); }alid number\"); }aise(this.pos, \"Identifier directly after number\"); }}s) - this.pos); \"Code point out of bounds\"); } 1023) + 0xDC00)art, \"Unterminated string constant\"); }this.raise(this.start, \"Unterminated string constant\"); } 9) {art, \"Unterminated template\"); }s.pos + 1) === 123) { // '`', '${'emplate || this.type === types.invalidTemplate)) {s.pos; }lidating any escape sequencesnput.slice(this.start, this.pos)) // 'x') // 'u'this.pos; } // '\\r\\n'; ++this.curLine; }ch(/^[0-7]+/)[0];this.strict || inTemplate)) {om output in both').haracter escape sequence\"); }s.containsEsc`ks as-isode escape sequence \\\\uXXXX\"); }sc, astral))e escape\"); }rvedt, \"Escape sequence in keyword \" + word); }cript.theand parsernkey/Parser_APIvenrmatst parser.nizer.});"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"1","column":"63"},"end":{"line":"5","column":"2"},"code":" ? factory(exports) :s'], factory) :"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"2","column":"66"},"end":{"line":"2","column":"82"},"code":"factory(exports) "},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"5","column":"9"},"end":{"line":"5001","column":"2"},"code":"function (exports) { 'use strict';erved word lists for various dialects of the languageservedWords = {abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",class enum extends super const export import\",enum\",ct: \"implements interface let package private protected public static yield\",ctBind: \"eval arguments\" the keywordsma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";ywords = {cma5AndLessKeywords,dule\": ecma5AndLessKeywords + \" export import\",cma5AndLessKeywords + \" const class extends export import super\"ywordRelationalOperator = /^in(stanceof)?$/;Character categories ugly regular expressions that match characters in thetespace, identifier, and identifier-start categories. These only applied when a character is found to actually have ae point above 128.erated by `bin/generate-identifier-regex.js`.nASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fef\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7c6\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab67\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";nASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";nASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");nASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");IIidentifierStartChars = nonASCIIidentifierChars = null;se are a run-length and offset encoded representation of theffff code points that are a valid part of identifiers. Theset starts at 0x10000, and each pair of numbers represents anset to the next range, and then a size of the range. They wereerated by bin/generate-identifier-regex.jsint-disable-next-line comma-spacingtralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,477,28,11,0,9,21,155,22,13,52,76,44,33,24,27,35,30,0,12,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,0,33,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,0,161,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,270,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,754,9486,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,15,7472,3104,541];int-disable-next-line comma-spacingtralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,525,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,4,9,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,232,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,792487,239];s has a complexity linear to the value of the code. Theumption is that looking up astral identifier characters ise.on isInAstralSet(code, set) {pos = 0x10000;(var i = 0; i < set.length; i += 2) {s += set[i]; (pos > code) { return false }s += set[i + 1]; (pos >= code) { return true }t whether a given character code starts an identifier.on isIdentifierStart(code, astral) {code < 65) { return code === 36 }code < 91) { return true }code < 97) { return code === 95 }code < 123) { return true }code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }astral === false) { return false }rn isInAstralSet(code, astralIdentifierStartCodes)t whether a given character is part of an identifier.on isIdentifierChar(code, astral) {code < 48) { return code === 36 }code < 58) { return true }code < 65) { return false }code < 91) { return true }code < 97) { return code === 95 }code < 123) { return true }code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }astral === false) { return false }rn isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)Token types assignment of fine-grained, information-carrying type objectsows the tokenizer to store the information it has about aen in a way that is very cheap for the parser to look up. token type variables start with an underscore, to make themy to recognize. `beforeExpr` property is used to disambiguate between regularressions and divisions. It is set on all token types that canfollowed by an expression (thus, a slash after them would be aular expression). `startsExpr` property is used to check if the token ends aeld` expression. It is set on all token types that either canectly start an expression (like a quotation mark) or cantinue an expression (like the body of a string).Loop` marks a keyword as starting a loop, which is importantknow when parsing a label, in order to allow or disallowtinue jumps to that label.kenType = function TokenType(label, conf) { conf === void 0 ) conf = {};.label = label;.keyword = conf.keyword;.beforeExpr = !!conf.beforeExpr;.startsExpr = !!conf.startsExpr;.isLoop = !!conf.isLoop;.isAssign = !!conf.isAssign;.prefix = !!conf.prefix;.postfix = !!conf.postfix;.binop = conf.binop || null;.updateContext = null;on binop(name, prec) {rn new TokenType(name, {beforeExpr: true, binop: prec})foreExpr = {beforeExpr: true}, startsExpr = {startsExpr: true}; keyword names to token types.ywords$1 = {};cinct definitions of keyword token typeson kw(name, options) { options === void 0 ) options = {};ons.keyword = name;rn keywords$1[name] = new TokenType(name, options)pes = { new TokenType(\"num\", startsExpr),xp: new TokenType(\"regexp\", startsExpr),ng: new TokenType(\"string\", startsExpr),: new TokenType(\"name\", startsExpr), new TokenType(\"eof\"),unctuation token types.ketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),ketR: new TokenType(\"]\"),eL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),eR: new TokenType(\"}\"),nL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),nR: new TokenType(\")\"),a: new TokenType(\",\", beforeExpr),: new TokenType(\";\", beforeExpr),n: new TokenType(\":\", beforeExpr), new TokenType(\".\"),tion: new TokenType(\"?\", beforeExpr),w: new TokenType(\"=>\", beforeExpr),late: new TokenType(\"template\"),lidTemplate: new TokenType(\"invalidTemplate\"),psis: new TokenType(\"...\", beforeExpr),Quote: new TokenType(\"`\", startsExpr),arBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),perators. These carry several kinds of properties to help thearser use them properly (the presence of these properties ishat categorizes them as operators).binop`, when present, specifies that this operator is a binaryperator, and will refer to its precedence.prefix` and `postfix` mark the operator as a prefix or postfixnary operator.isAssign` marks all of `=`, `+=`, `-=` etcetera, which act asinary operators with a very low precedence, that should resultn AssignmentExpression nodes.new TokenType(\"=\", {beforeExpr: true, isAssign: true}),gn: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),ec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),ix: new TokenType(\"!/~\", {beforeExpr: true, prefix: true, startsExpr: true}),calOR: binop(\"||\", 1),calAND: binop(\"&&\", 2),iseOR: binop(\"|\", 3),iseXOR: binop(\"^\", 4),iseAND: binop(\"&\", 5),lity: binop(\"==/!=/===/!==\", 6),tional: binop(\"</>/<=/>=\", 7),hift: binop(\"<</>>/>>>\", 8),Min: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),lo: binop(\"%\", 10),: binop(\"*\", 10),h: binop(\"/\", 10),star: new TokenType(\"**\", {beforeExpr: true}),eyword token types.ak: kw(\"break\"),e: kw(\"case\", beforeExpr),ch: kw(\"catch\"),tinue: kw(\"continue\"),ugger: kw(\"debugger\"),ault: kw(\"default\", beforeExpr), kw(\"do\", {isLoop: true, beforeExpr: true}),e: kw(\"else\", beforeExpr),ally: kw(\"finally\"),: kw(\"for\", {isLoop: true}),ction: kw(\"function\", startsExpr), kw(\"if\"),urn: kw(\"return\", beforeExpr),tch: kw(\"switch\"),ow: kw(\"throw\", beforeExpr),: kw(\"try\"),: kw(\"var\"),st: kw(\"const\"),le: kw(\"while\", {isLoop: true}),h: kw(\"with\"),: kw(\"new\", {beforeExpr: true, startsExpr: true}),s: kw(\"this\", startsExpr),er: kw(\"super\", startsExpr),ss: kw(\"class\", startsExpr),ends: kw(\"extends\", beforeExpr),ort: kw(\"export\"),ort: kw(\"import\", startsExpr),l: kw(\"null\", startsExpr),e: kw(\"true\", startsExpr),se: kw(\"false\", startsExpr), kw(\"in\", {beforeExpr: true, binop: 7}),tanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),eof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),d: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),ete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})ches a whole line break (where CRLF is considered a singlee break). Used to count lines.neBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;neBreakG = new RegExp(lineBreak.source, \"g\");on isNewLine(code, ecma2019String) {rn code === 10 || code === 13 || (!ecma2019String && (code === 0x2028 || code === 0x2029))nASCIIwhitespace = /[\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;ipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;f = Object.prototype;sOwnProperty = ref.hasOwnProperty;String = ref.toString;cks if an object has a property.on has(obj, propName) {rn hasOwnProperty.call(obj, propName)Array = Array.isArray || (function (obj) { return (ring.call(obj) === \"[object Array]\"on wordsRegexp(words) {rn new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\")se are used when `options.locations` is on, for theartLoc` and `endLoc` properties.sition = function Position(line, col) {.line = line;.column = col;on.prototype.offset = function offset (n) {rn new Position(this.line, this.column + n)urceLocation = function SourceLocation(p, start, end) {.start = start;.end = end;p.sourceFile !== null) { this.source = p.sourceFile; } `getLineInfo` function is mostly useful when thecations` option is off (for performance reasons) and yout to find the line/column position for a given characterset. `input` should be the code string that the offset referso.on getLineInfo(input, offset) {(var line = 1, cur = 0;;) {neBreakG.lastIndex = cur;r match = lineBreakG.exec(input); (match && match.index < offset) {++line;cur = match.index + match[0].length;else {return new Position(line, offset - cur)econd optional argument can be given to further configure parser process. These options are recognized:faultOptions = {ecmaVersion` indicates the ECMAScript version to parse. Must beither 3, 5, 6 (2015), 7 (2016), 8 (2017), 9 (2018), or 102019). This influences support for strict mode, the set ofeserved words, and support for new syntax features. The defaults 10.Version: 10,sourceType` indicates the mode the code should be parsed in.an be either `\"script\"` or `\"module\"`. This influences globaltrict mode and parsing of `import` and `export` declarations.ceType: \"script\",onInsertedSemicolon` can be a callback that will be calledhen a semicolon is automatically inserted. It will be passedhe position of the comma as an offset, and if `locations` isnabled, it is given the location as a `{line, column}` objects second argument.sertedSemicolon: null,onTrailingComma` is similar to `onInsertedSemicolon`, but forrailing commas.ailingComma: null,y default, reserved words are only enforced if ecmaVersion >= 5.et `allowReserved` to a boolean value to explicitly turn this onn off. When this option has the value \"never\", reserved wordsnd keywords can also not be used as property names.wReserved: null,hen enabled, a return at the top level is not considered anrror.wReturnOutsideFunction: false,hen enabled, import/export statements are not constrained toppearing at the top of the program.wImportExportEverywhere: false,hen enabled, await identifiers are allowed to appear at the top-level scope,ut they are still not allowed in non-async functions.wAwaitOutsideFunction: false,hen enabled, hashbang directive in the beginning of files allowed and treated as a line comment.wHashBang: false,hen `locations` is on, `loc` properties holding objects withstart` and `end` properties in `{line, column}` form (withine being 1-based and column 0-based) will be attached to theodes.tions: false, function can be passed as `onToken` option, which willause Acorn to call that function with object in the sameormat as tokens returned from `tokenizer().getToken()`. Notehat you are not allowed to call the parser from theallback—that will corrupt its internal state.ken: null, function can be passed as `onComment` option, which willause Acorn to call that function with `(block, text, start,nd)` parameters whenever a comment is skipped. `block` is aoolean indicating whether this is a block (`/* */`) comment,text` is the content of the comment, and `start` and `end` areharacter offsets that denote the start and end of the comment.hen the `locations` option is on, two more parameters areassed, the full `{line, column}` locations of the start andnd of the comments. Note that you are not allowed to call thearser from the callback—that will corrupt its internal state.mment: null,odes have their start and end characters offsets recorded instart` and `end` properties (directly on the node, rather thanhe `loc` object, which holds line/column data. To also add asemi-standardized][range] `range` property holding a `[start,nd]` array with the same numbers, set the `ranges` option totrue`.range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678es: false,t is possible to parse multiple files into a single AST byassing the tree produced by parsing the first file asprogram` option in subsequent parses. This will add theoplevel forms of the parsed file to the `Program` (top) nodef an existing parse tree.ram: null,hen `locations` is on, you can pass this to record the sourceile in every node's `loc` object.ceFile: null,his value, if given, is stored in every node, whetherlocations` is on or off.ctSourceFile: null,hen enabled, parenthesized expressions are represented bynon-standard) ParenthesizedExpression nodeserveParens: falseerpret and default an options objecton getOptions(opts) {options = {};(var opt in defaultOptions)options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt]; }options.ecmaVersion >= 2015)options.ecmaVersion -= 2009; }options.allowReserved == null)options.allowReserved = options.ecmaVersion < 5; }isArray(options.onToken)) {r tokens = options.onToken;tions.onToken = function (token) { return tokens.push(token); };isArray(options.onComment))options.onComment = pushComment(options, options.onComment); }rn optionson pushComment(options, array) {rn function(block, text, start, end, startLoc, endLoc) {r comment = {type: block ? \"Block\" : \"Line\",value: text,start: start,end: end (options.locations){ comment.loc = new SourceLocation(this, startLoc, endLoc); } (options.ranges){ comment.range = [start, end]; }ray.push(comment);h scope gets a bitset that may contain these flagsOPE_TOP = 1,OPE_FUNCTION = 2,OPE_VAR = SCOPE_TOP | SCOPE_FUNCTION,OPE_ASYNC = 4,OPE_GENERATOR = 8,OPE_ARROW = 16,OPE_SIMPLE_CATCH = 32,OPE_SUPER = 64,OPE_DIRECT_SUPER = 128;on functionFlags(async, generator) {rn SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0)d in checkLVal and declareName to determine the type of a bindingND_NONE = 0, // Not a bindingND_VAR = 1, // Var-style bindingND_LEXICAL = 2, // Let- or const-style bindingND_FUNCTION = 3, // Function declarationND_SIMPLE_CATCH = 4, // Simple (identifier pattern) catch bindingND_OUTSIDE = 5; // Special case for function names as bound inside the functionrser = function Parser(options, input, startPos) {.options = options = getOptions(options);.sourceFile = options.sourceFile;.keywords = wordsRegexp(keywords[options.ecmaVersion >= 6 ? 6 : options.sourceType === \"module\" ? \"5module\" : 5]);reserved = \"\";options.allowReserved !== true) {r (var v = options.ecmaVersion;; v--){ if (reserved = reservedWords[v]) { break } } (options.sourceType === \"module\") { reserved += \" await\"; }.reservedWords = wordsRegexp(reserved);reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict;.reservedWordsStrict = wordsRegexp(reservedStrict);.reservedWordsStrictBind = wordsRegexp(reservedStrict + \" \" + reservedWords.strictBind);.input = String(input);sed to signal to callers of `readWord1` whether the wordontained any escape sequences. This is needed because words withscape sequences must not be interpreted as keywords..containsEsc = false;et up token statehe current position of the tokenizer in the input.startPos) {is.pos = startPos;is.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;is.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;se {is.pos = this.lineStart = 0;is.curLine = 1;roperties of the current token:ts type.type = types.eof;or tokens that include more information than their type, the value.value = null;ts start and end offset.start = this.end = this.pos;nd, if locations are used, the {line, column} objectorresponding to those offsets.startLoc = this.endLoc = this.curPosition();osition information for the previous token.lastTokEndLoc = this.lastTokStartLoc = null;.lastTokStart = this.lastTokEnd = this.pos;he context stack is used to superficially track syntacticontext to predict whether a regular expression is allowed in aiven position..context = this.initialContext();.exprAllowed = true;igure out if it's a module code..inModule = options.sourceType === \"module\";.strict = this.inModule || this.strictDirective(this.pos);sed to signify the start of a potential arrow function.potentialArrowAt = -1;ositions to delayed-check that yield/await does not exist in default parameters..yieldPos = this.awaitPos = this.awaitIdentPos = 0;abels in scope..labels = [];hus-far undefined exports..undefinedExports = {};f enabled, skip leading hashbang line.this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === \"#!\")this.skipLineComment(2); }cope tracking for duplicate variable names (see scope.js).scopeStack = [];.enterScope(SCOPE_TOP);or RegExp validation.regexpState = null;ototypeAccessors = { inFunction: { configurable: true },inGenerator: { configurable: true },inAsync: { configurable: true },allowSuper: { configurable: true },allowDirectSuper: { configurable: true },treatFunctionsAsVar: { configurable: true } };.prototype.parse = function parse () {node = this.options.program || this.startNode();.nextToken();rn this.parseTopLevel(node)ypeAccessors.inFunction.get = function () { return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0 };ypeAccessors.inGenerator.get = function () { return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 };ypeAccessors.inAsync.get = function () { return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 };ypeAccessors.allowSuper.get = function () { return (this.currentThisScope().flags & SCOPE_SUPER) > 0 };ypeAccessors.allowDirectSuper.get = function () { return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0 };ypeAccessors.treatFunctionsAsVar.get = function () { return this.treatFunctionsAsVarInScope(this.currentScope()) };tch to a getter for 7.0.0..prototype.inNonArrowFunction = function inNonArrowFunction () { return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0 };.extend = function extend () {r plugins = [], len = arguments.length;ile ( len-- ) plugins[ len ] = arguments[ len ];cls = this;(var i = 0; i < plugins.length; i++) { cls = plugins[i](cls); }rn cls.parse = function parse (input, options) {rn new this(options, input).parse().parseExpressionAt = function parseExpressionAt (input, pos, options) {parser = new this(options, input, pos);er.nextToken();rn parser.parseExpression().tokenizer = function tokenizer (input, options) {rn new this(options, input).defineProperties( Parser.prototype, prototypeAccessors ); = Parser.prototype;Parser utilitiesteral = /^(?:'((?:\\\\.|[^'])*?)'|\"((?:\\\\.|[^\"])*?)\")/;ictDirective = function(start) {(;;) { Try to find string literal.ipWhiteSpace.lastIndex = start;art += skipWhiteSpace.exec(this.input)[0].length;r match = literal.exec(this.input.slice(start)); (!match) { return false } ((match[1] || match[2]) === \"use strict\") { return true }art += match[0].length; Skip semicolon, if any.ipWhiteSpace.lastIndex = start;art += skipWhiteSpace.exec(this.input)[0].length; (this.input[start] === \";\"){ start++; }dicate that tests whether the next token is of the givene, and if yes, consumes it as a side effect. = function(type) {this.type === type) {is.next();turn truese {turn falsets whether parsed token is a contextual keyword.ontextual = function(name) {rn this.type === types.name && this.value === name && !this.containsEscsumes contextual keyword if possible.Contextual = function(name) {!this.isContextual(name)) { return false }.next();rn trueerts that following token is given contextual keyword.ectContextual = function(name) {!this.eatContextual(name)) { this.unexpected(); }t whether a semicolon can be inserted at the current position.InsertSemicolon = function() {rn this.type === types.eof ||is.type === types.braceR ||neBreak.test(this.input.slice(this.lastTokEnd, this.start))ertSemicolon = function() {this.canInsertSemicolon()) { (this.options.onInsertedSemicolon){ this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); }turn truesume a semicolon, or, failing that, see if we are allowed totend that there is a semicolon at this position.icolon = function() {!this.eat(types.semi) && !this.insertSemicolon()) { this.unexpected(); }erTrailingComma = function(tokType, notNext) {this.type === tokType) { (this.options.onTrailingComma){ this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); } (!notNext){ this.next(); }turn trueect a token of a given type. If found, consume it, otherwise,se an unexpected token error.ect = function(type) {.eat(type) || this.unexpected();se an unexpected token error.xpected = function(pos) {.raise(pos != null ? pos : this.start, \"Unexpected token\");on DestructuringErrors() {.shorthandAssign =.trailingComma =.parenthesizedAssign =.parenthesizedBind =.doubleProto =;ckPatternErrors = function(refDestructuringErrors, isAssign) {!refDestructuringErrors) { return }refDestructuringErrors.trailingComma > -1)this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\"); }parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;parens > -1) { this.raiseRecoverable(parens, \"Parenthesized pattern\"); }ckExpressionErrors = function(refDestructuringErrors, andThrow) {!refDestructuringErrors) { return false }shorthandAssign = refDestructuringErrors.shorthandAssign;doubleProto = refDestructuringErrors.doubleProto;!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }shorthandAssign >= 0)this.raise(shorthandAssign, \"Shorthand property assignments are valid only in destructuring patterns\"); }doubleProto >= 0)this.raiseRecoverable(doubleProto, \"Redefinition of __proto__ property\"); }ckYieldAwaitInDefaultParams = function() {this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))this.raise(this.yieldPos, \"Yield expression cannot be a default value\"); }this.awaitPos)this.raise(this.awaitPos, \"Await expression cannot be a default value\"); }impleAssignTarget = function(expr) {expr.type === \"ParenthesizedExpression\")return this.isSimpleAssignTarget(expr.expression) }rn expr.type === \"Identifier\" || expr.type === \"MemberExpression\"$1 = Parser.prototype; Statement parsingse a program. Initializes the parser, reads any number oftements, and wraps them in a Program node.  Optionally takes aogram` argument.  If present, the statements will be appendedits body instead of creating a new node.arseTopLevel = function(node) {exports = {};!node.body) { node.body = []; }e (this.type !== types.eof) {r stmt = this.parseStatement(null, true, exports);de.body.push(stmt);this.inModule)for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1){  var name = list[i];  this.raiseRecoverable(this.undefinedExports[name].start, (\"Export '\" + name + \"' is not defined\"));} }.adaptDirectivePrologue(node.body);.next();.sourceType = this.options.sourceType;rn this.finishNode(node, \"Program\")opLabel = {kind: \"loop\"}, switchLabel = {kind: \"switch\"};sLet = function(context) {this.options.ecmaVersion < 6 || !this.isContextual(\"let\")) { return false }WhiteSpace.lastIndex = this.pos;skip = skipWhiteSpace.exec(this.input);next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);or ambiguous cases, determine if a LexicalDeclaration (or only atatement) is allowed here. If context is not empty then only a Statements allowed. However, `let [` is an explicit negative lookahead forxpressionStatement, so special-case it first.nextCh === 91) { return true } // '['context) { return false }nextCh === 123) { return true } // '{'isIdentifierStart(nextCh, true)) {r pos = next + 1;ile (isIdentifierChar(this.input.charCodeAt(pos), true)) { ++pos; }r ident = this.input.slice(next, pos); (!keywordRelationalOperator.test(ident)) { return true }rn falseck 'async [no LineTerminator here] function'async /*foo*/ function' is OK.async /*\\n*/ function' is invalid.sAsyncFunction = function() {this.options.ecmaVersion < 8 || !this.isContextual(\"async\"))return false }WhiteSpace.lastIndex = this.pos;skip = skipWhiteSpace.exec(this.input);next = this.pos + skip[0].length;rn !lineBreak.test(this.input.slice(this.pos, next)) &&is.input.slice(next, next + 8) === \"function\" &&ext + 8 === this.input.length || !isIdentifierChar(this.input.charAt(next + 8)))se a single statement.expecting a statement and finding a slash operator, parse aular expression literal. This is to handle cases like (foo) /blah/.exec(foo)`, where looking at the previous tokens not help.arseStatement = function(context, topLevel, exports) {starttype = this.type, node = this.startNode(), kind;this.isLet(context)) {arttype = types._var;nd = \"let\";ost types of statements are recognized by the keyword theytart with. Many are trivial to parse, some require a bit ofomplexity.ch (starttype) { types._break: case types._continue: return this.parseBreakContinueStatement(node, starttype.keyword) types._debugger: return this.parseDebuggerStatement(node) types._do: return this.parseDoStatement(node) types._for: return this.parseForStatement(node) types._function: Function as sole body of either an if statement or a labeled statement works, but not when it is part of a labeled statement that is the sole body of an if statement. ((context && (this.strict || context !== \"if\" && context !== \"label\")) && this.options.ecmaVersion >= 6) { this.unexpected(); }turn this.parseFunctionStatement(node, false, !context) types._class: (context) { this.unexpected(); }turn this.parseClass(node, true) types._if: return this.parseIfStatement(node) types._return: return this.parseReturnStatement(node) types._switch: return this.parseSwitchStatement(node) types._throw: return this.parseThrowStatement(node) types._try: return this.parseTryStatement(node) types._const: case types._var:nd = kind || this.value; (context && kind !== \"var\") { this.unexpected(); }turn this.parseVarStatement(node, kind) types._while: return this.parseWhileStatement(node) types._with: return this.parseWithStatement(node) types.braceL: return this.parseBlock(true, node) types.semi: return this.parseEmptyStatement(node) types._export: types._import: (this.options.ecmaVersion > 10 && starttype === types._import) {skipWhiteSpace.lastIndex = this.pos;var skip = skipWhiteSpace.exec(this.input);var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);if (nextCh === 40) // '('  { return this.parseExpressionStatement(node, this.parseExpression()) } (!this.options.allowImportExportEverywhere) {if (!topLevel)  { this.raise(this.start, \"'import' and 'export' may only appear at the top level\"); }if (!this.inModule)  { this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\"); }turn starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports) If the statement does not start with a statement keyword or a brace, it's an ExpressionStatement or LabeledStatement. We simply start parsing an expression, and afterwards, if the next token is a colon and the expression was a simple Identifier node, we switch to interpreting it as a label.ult: (this.isAsyncFunction()) {if (context) { this.unexpected(); }this.next();return this.parseFunctionStatement(node, true, !context)r maybeName = this.value, expr = this.parseExpression(); (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon)){ return this.parseLabeledStatement(node, maybeName, expr, context) }se { return this.parseExpressionStatement(node, expr) }arseBreakContinueStatement = function(node, keyword) {isBreak = keyword === \"break\";.next();this.eat(types.semi) || this.insertSemicolon()) { node.label = null; } if (this.type !== types.name) { this.unexpected(); } {de.label = this.parseIdent();is.semicolon();erify that there is an actual destination to break orontinue to.i = 0;(; i < this.labels.length; ++i) {r lab = this.labels[i]; (node.label == null || lab.name === node.label.name) {if (lab.kind != null && (isBreak || lab.kind === \"loop\")) { break }if (node.label && isBreak) { break }i === this.labels.length) { this.raise(node.start, \"Unsyntactic \" + keyword); }rn this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")arseDebuggerStatement = function(node) {.next();.semicolon();rn this.finishNode(node, \"DebuggerStatement\")arseDoStatement = function(node) {.next();.labels.push(loopLabel);.body = this.parseStatement(\"do\");.labels.pop();.expect(types._while);.test = this.parseParenExpression();this.options.ecmaVersion >= 6)this.eat(types.semi); }this.semicolon(); }rn this.finishNode(node, \"DoWhileStatement\")ambiguating between a `for` and a `for`/`in` or `for`/`of`p is non-trivial. Basically, we have to parse the init `var`tement or expression, disallowing the `in` operator (see second parameter to `parseExpression`), and then checkther the next token is `in` or `of`. When there is no initt (semicolon immediately after the opening parenthesis), ita regular `for` loop.arseForStatement = function(node) {.next();awaitAt = (this.options.ecmaVersion >= 9 && (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction)) && this.eatContextual(\"await\")) ? this.lastTokStart : -1;.labels.push(loopLabel);.enterScope(0);.expect(types.parenL);this.type === types.semi) { (awaitAt > -1) { this.unexpected(awaitAt); }turn this.parseFor(node, null)isLet = this.isLet();this.type === types._var || this.type === types._const || isLet) {r init$1 = this.startNode(), kind = isLet ? \"let\" : this.value;is.next();is.parseVar(init$1, true, kind);is.finishNode(init$1, \"VariableDeclaration\"); ((this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1) {if (this.options.ecmaVersion >= 9) {  if (this.type === types._in) {    if (awaitAt > -1) { this.unexpected(awaitAt); }  } else { node.await = awaitAt > -1; }}return this.parseForIn(node, init$1) (awaitAt > -1) { this.unexpected(awaitAt); }turn this.parseFor(node, init$1)refDestructuringErrors = new DestructuringErrors;init = this.parseExpression(true, refDestructuringErrors);this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) { (this.options.ecmaVersion >= 9) {if (this.type === types._in) {  if (awaitAt > -1) { this.unexpected(awaitAt); }} else { node.await = awaitAt > -1; }is.toAssignable(init, false, refDestructuringErrors);is.checkLVal(init);turn this.parseForIn(node, init)se {is.checkExpressionErrors(refDestructuringErrors, true);awaitAt > -1) { this.unexpected(awaitAt); }rn this.parseFor(node, init)arseFunctionStatement = function(node, isAsync, declarationPosition) {.next();rn this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync)arseIfStatement = function(node) {.next();.test = this.parseParenExpression();llow function declarations in branches, but only in non-strict mode.consequent = this.parseStatement(\"if\");.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;rn this.finishNode(node, \"IfStatement\")arseReturnStatement = function(node) {!this.inFunction && !this.options.allowReturnOutsideFunction)this.raise(this.start, \"'return' outside of function\"); }.next();n `return` (and `break`/`continue`), the keywords withptional arguments, we eagerly look for a semicolon or theossibility to insert one.this.eat(types.semi) || this.insertSemicolon()) { node.argument = null; } { node.argument = this.parseExpression(); this.semicolon(); }rn this.finishNode(node, \"ReturnStatement\")arseSwitchStatement = function(node) {.next();.discriminant = this.parseParenExpression();.cases = [];.expect(types.braceL);.labels.push(switchLabel);.enterScope(0);tatements under must be grouped (by label) in SwitchCaseodes. `cur` is used to keep the node that we are currentlydding statements to.cur;(var sawDefault = false; this.type !== types.braceR;) { (this.type === types._case || this.type === types._default) {var isCase = this.type === types._case;if (cur) { this.finishNode(cur, \"SwitchCase\"); }node.cases.push(cur = this.startNode());cur.consequent = [];this.next();if (isCase) {  cur.test = this.parseExpression();} else {  if (sawDefault) { this.raiseRecoverable(this.lastTokStart, \"Multiple default clauses\"); }  sawDefault = true;  cur.test = null;}this.expect(types.colon);else {if (!cur) { this.unexpected(); }cur.consequent.push(this.parseStatement(null));.exitScope();cur) { this.finishNode(cur, \"SwitchCase\"); }.next(); // Closing brace.labels.pop();rn this.finishNode(node, \"SwitchStatement\")arseThrowStatement = function(node) {.next();lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))this.raise(this.lastTokEnd, \"Illegal newline after throw\"); }.argument = this.parseExpression();.semicolon();rn this.finishNode(node, \"ThrowStatement\")sed empty array added for node fields that are always empty.pty = [];arseTryStatement = function(node) {.next();.block = this.parseBlock();.handler = null;this.type === types._catch) {r clause = this.startNode();is.next(); (this.eat(types.parenL)) {clause.param = this.parseBindingAtom();var simple = clause.param.type === \"Identifier\";this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);this.checkLVal(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);this.expect(types.parenR);else {if (this.options.ecmaVersion < 10) { this.unexpected(); }clause.param = null;this.enterScope(0);ause.body = this.parseBlock(false);is.exitScope();de.handler = this.finishNode(clause, \"CatchClause\");.finalizer = this.eat(types._finally) ? this.parseBlock() : null;!node.handler && !node.finalizer)this.raise(node.start, \"Missing catch or finally clause\"); }rn this.finishNode(node, \"TryStatement\")arseVarStatement = function(node, kind) {.next();.parseVar(node, false, kind);.semicolon();rn this.finishNode(node, \"VariableDeclaration\")arseWhileStatement = function(node) {.next();.test = this.parseParenExpression();.labels.push(loopLabel);.body = this.parseStatement(\"while\");.labels.pop();rn this.finishNode(node, \"WhileStatement\")arseWithStatement = function(node) {this.strict) { this.raise(this.start, \"'with' in strict mode\"); }.next();.object = this.parseParenExpression();.body = this.parseStatement(\"with\");rn this.finishNode(node, \"WithStatement\")arseEmptyStatement = function(node) {.next();rn this.finishNode(node, \"EmptyStatement\")arseLabeledStatement = function(node, maybeName, expr, context) {(var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1)r label = list[i$1]; (label.name === maybeName){ this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");kind = this.type.isLoop ? \"loop\" : this.type === types._switch ? \"switch\" : null;(var i = this.labels.length - 1; i >= 0; i--) {r label$1 = this.labels[i]; (label$1.statementStart === node.start) {// Update information about previous labels on this nodelabel$1.statementStart = this.start;label$1.kind = kind;else { break }.labels.push({name: maybeName, kind: kind, statementStart: this.start});.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");.labels.pop();.label = expr;rn this.finishNode(node, \"LabeledStatement\")arseExpressionStatement = function(node, expr) {.expression = expr;.semicolon();rn this.finishNode(node, \"ExpressionStatement\")se a semicolon-enclosed block of statements, handling `\"useict\"` declarations when `allowStrict` is true (used forction bodies).arseBlock = function(createNewLexicalScope, node) { createNewLexicalScope === void 0 ) createNewLexicalScope = true; node === void 0 ) node = this.startNode();.body = [];.expect(types.braceL);createNewLexicalScope) { this.enterScope(0); }e (!this.eat(types.braceR)) {r stmt = this.parseStatement(null);de.body.push(stmt);createNewLexicalScope) { this.exitScope(); }rn this.finishNode(node, \"BlockStatement\")se a regular `for` loop. The disambiguation code inrseStatement` will already have parsed the init statement orression.arseFor = function(node, init) {.init = init;.expect(types.semi);.test = this.type === types.semi ? null : this.parseExpression();.expect(types.semi);.update = this.type === types.parenR ? null : this.parseExpression();.expect(types.parenR);.body = this.parseStatement(\"for\");.exitScope();.labels.pop();rn this.finishNode(node, \"ForStatement\")se a `for`/`in` and `for`/`of` loop, which are almoste from parser's perspective.arseForIn = function(node, init) {isForIn = this.type === types._in;.next();it.type === \"VariableDeclaration\" &&it.declarations[0].init != null &&!isForIn ||this.options.ecmaVersion < 8 ||this.strict ||init.kind !== \"var\" ||init.declarations[0].id.type !== \"Identifier\"is.raise(init.start,((isForIn ? \"for-in\" : \"for-of\") + \" loop variable declaration may not have an initializer\")se if (init.type === \"AssignmentPattern\") {is.raise(init.start, \"Invalid left-hand side in for-loop\");.left = init;.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();.expect(types.parenR);.body = this.parseStatement(\"for\");.exitScope();.labels.pop();rn this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\")se a list of variable declarations.arseVar = function(node, isFor, kind) {.declarations = [];.kind = kind;(;;) {r decl = this.startNode();is.parseVarId(decl, kind); (this.eat(types.eq)) {decl.init = this.parseMaybeAssign(isFor);else if (kind === \"const\" && !(this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\")))) {this.unexpected();else if (decl.id.type !== \"Identifier\" && !(isFor && (this.type === types._in || this.isContextual(\"of\")))) {this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\");else {decl.init = null;de.declarations.push(this.finishNode(decl, \"VariableDeclarator\")); (!this.eat(types.comma)) { break }rn nodearseVarId = function(decl, kind) {.id = this.parseBindingAtom();.checkLVal(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, false);NC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;se a function declaration or literal (depending on theatement & FUNC_STATEMENT`).ove `allowExpressionBody` for 7.0.0, as it is only called with falsearseFunction = function(node, statement, allowExpressionBody, isAsync) {.initFunction(node);this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) { (this.type === types.star && (statement & FUNC_HANGING_STATEMENT)){ this.unexpected(); }de.generator = this.eat(types.star);this.options.ecmaVersion >= 8)node.async = !!isAsync; }statement & FUNC_STATEMENT) {de.id = (statement & FUNC_NULLABLE_ID) && this.type !== types.name ? null : this.parseIdent(); (node.id && !(statement & FUNC_HANGING_STATEMENT))// If it is a regular function declaration in sloppy mode, then it is// subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding// mode depends on properties of the current scope (see// treatFunctionsAsVar).{ this.checkLVal(node.id, (this.strict || node.generator || node.async) ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION); }oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;.yieldPos = 0;.awaitPos = 0;.awaitIdentPos = 0;.enterScope(functionFlags(node.async, node.generator));!(statement & FUNC_STATEMENT))node.id = this.type === types.name ? this.parseIdent() : null; }.parseFunctionParams(node);.parseFunctionBody(node, allowExpressionBody, false);.yieldPos = oldYieldPos;.awaitPos = oldAwaitPos;.awaitIdentPos = oldAwaitIdentPos;rn this.finishNode(node, (statement & FUNC_STATEMENT) ? \"FunctionDeclaration\" : \"FunctionExpression\")arseFunctionParams = function(node) {.expect(types.parenL);.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);.checkYieldAwaitInDefaultParams();se a class declaration or literal (depending on theStatement` parameter).arseClass = function(node, isStatement) {.next();cma-262 14.6 Class Definitions class definition is always strict mode code.oldStrict = this.strict;.strict = true;.parseClassId(node, isStatement);.parseClassSuper(node);classBody = this.startNode();hadConstructor = false;sBody.body = [];.expect(types.braceL);e (!this.eat(types.braceR)) {r element = this.parseClassElement(node.superClass !== null); (element) {classBody.body.push(element);if (element.type === \"MethodDefinition\" && element.kind === \"constructor\") {  if (hadConstructor) { this.raise(element.start, \"Duplicate constructor in the same class\"); }  hadConstructor = true;}.body = this.finishNode(classBody, \"ClassBody\");.strict = oldStrict;rn this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")arseClassElement = function(constructorAllowsSuper) {this$1 = this;this.eat(types.semi)) { return null }method = this.startNode();tryContextual = function (k, noLineBreak) { ( noLineBreak === void 0 ) noLineBreak = false;r start = this$1.start, startLoc = this$1.startLoc; (!this$1.eatContextual(k)) { return false } (this$1.type !== types.parenL && (!noLineBreak || !this$1.canInsertSemicolon())) { return true } (method.key) { this$1.unexpected(); }thod.computed = false;thod.key = this$1.startNodeAt(start, startLoc);thod.key.name = k;is$1.finishNode(method.key, \"Identifier\");turn falseod.kind = \"method\";od.static = tryContextual(\"static\");isGenerator = this.eat(types.star);isAsync = false;!isGenerator) { (this.options.ecmaVersion >= 8 && tryContextual(\"async\", true)) {isAsync = true;isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);else if (tryContextual(\"get\")) {method.kind = \"get\";else if (tryContextual(\"set\")) {method.kind = \"set\";!method.key) { this.parsePropertyName(method); }key = method.key;allowsDirectSuper = false;!method.computed && !method.static && (key.type === \"Identifier\" && key.name === \"constructor\" ||key.type === \"Literal\" && key.value === \"constructor\")) { (method.kind !== \"method\") { this.raise(key.start, \"Constructor can't have get/set modifier\"); } (isGenerator) { this.raise(key.start, \"Constructor can't be a generator\"); } (isAsync) { this.raise(key.start, \"Constructor can't be an async method\"); }thod.kind = \"constructor\";lowsDirectSuper = constructorAllowsSuper;se if (method.static && key.type === \"Identifier\" && key.name === \"prototype\") {is.raise(key.start, \"Classes may not have a static property named prototype\");.parseClassMethod(method, isGenerator, isAsync, allowsDirectSuper);method.kind === \"get\" && method.value.params.length !== 0)this.raiseRecoverable(method.value.start, \"getter should have no params\"); }method.kind === \"set\" && method.value.params.length !== 1)this.raiseRecoverable(method.value.start, \"setter should have exactly one param\"); }method.kind === \"set\" && method.value.params[0].type === \"RestElement\")this.raiseRecoverable(method.value.params[0].start, \"Setter cannot use rest params\"); }rn methodarseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {od.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);rn this.finishNode(method, \"MethodDefinition\")arseClassId = function(node, isStatement) {this.type === types.name) {de.id = this.parseIdent(); (isStatement){ this.checkLVal(node.id, BIND_LEXICAL, false); }se { (isStatement === true){ this.unexpected(); }de.id = null;arseClassSuper = function(node) {.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;ses module export declaration.arseExport = function(node, exports) {.next();xport * from '...'this.eat(types.star)) {is.expectContextual(\"from\"); (this.type !== types.string) { this.unexpected(); }de.source = this.parseExprAtom();is.semicolon();turn this.finishNode(node, \"ExportAllDeclaration\")this.eat(types._default)) { // export default ...is.checkExport(exports, \"default\", this.lastTokStart);r isAsync; (this.type === types._function || (isAsync = this.isAsyncFunction())) {var fNode = this.startNode();this.next();if (isAsync) { this.next(); }node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);else if (this.type === types._class) {var cNode = this.startNode();node.declaration = this.parseClass(cNode, \"nullableID\");else {node.declaration = this.parseMaybeAssign();this.semicolon();turn this.finishNode(node, \"ExportDefaultDeclaration\")xport var|const|let|function|class ...this.shouldParseExportStatement()) {de.declaration = this.parseStatement(null); (node.declaration.type === \"VariableDeclaration\"){ this.checkVariableExport(exports, node.declaration.declarations); }se{ this.checkExport(exports, node.declaration.id.name, node.declaration.id.start); }de.specifiers = [];de.source = null;se { // export { x, y as z } [from '...']de.declaration = null;de.specifiers = this.parseExportSpecifiers(exports); (this.eatContextual(\"from\")) {if (this.type !== types.string) { this.unexpected(); }node.source = this.parseExprAtom();else {for (var i = 0, list = node.specifiers; i < list.length; i += 1) {  // check for keywords used as local names  var spec = list[i];  this.checkUnreserved(spec.local);  // check if export is defined  this.checkLocalExport(spec.local);}node.source = null;is.semicolon();rn this.finishNode(node, \"ExportNamedDeclaration\")heckExport = function(exports, name, pos) {!exports) { return }has(exports, name))this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\"); }rts[name] = true;heckPatternExport = function(exports, pat) {type = pat.type;type === \"Identifier\")this.checkExport(exports, pat.name, pat.start); } if (type === \"ObjectPattern\")for (var i = 0, list = pat.properties; i < list.length; i += 1){  var prop = list[i];  this.checkPatternExport(exports, prop);} } if (type === \"ArrayPattern\")for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {var elt = list$1[i$1];  if (elt) { this.checkPatternExport(exports, elt); }} if (type === \"Property\")this.checkPatternExport(exports, pat.value); } if (type === \"AssignmentPattern\")this.checkPatternExport(exports, pat.left); } if (type === \"RestElement\")this.checkPatternExport(exports, pat.argument); } if (type === \"ParenthesizedExpression\")this.checkPatternExport(exports, pat.expression); }heckVariableExport = function(exports, decls) {!exports) { return }(var i = 0, list = decls; i < list.length; i += 1)r decl = list[i];is.checkPatternExport(exports, decl.id);houldParseExportStatement = function() {rn this.type.keyword === \"var\" ||is.type.keyword === \"const\" ||is.type.keyword === \"class\" ||is.type.keyword === \"function\" ||is.isLet() ||is.isAsyncFunction()ses a comma-separated list of module exports.arseExportSpecifiers = function(exports) {nodes = [], first = true;xport { x, y as z } [from '...'].expect(types.braceL);e (!this.eat(types.braceR)) { (!first) {this.expect(types.comma);if (this.afterTrailingComma(types.braceR)) { break }else { first = false; }r node = this.startNode();de.local = this.parseIdent(true);de.exported = this.eatContextual(\"as\") ? this.parseIdent(true) : node.local;is.checkExport(exports, node.exported.name, node.exported.start);des.push(this.finishNode(node, \"ExportSpecifier\"));rn nodesses import declaration.arseImport = function(node) {.next();mport '...'this.type === types.string) {de.specifiers = empty;de.source = this.parseExprAtom();se {de.specifiers = this.parseImportSpecifiers();is.expectContextual(\"from\");de.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();.semicolon();rn this.finishNode(node, \"ImportDeclaration\")ses a comma-separated list of module imports.arseImportSpecifiers = function() {nodes = [], first = true;this.type === types.name) { import defaultObj, { x, y as z } from '...'r node = this.startNode();de.local = this.parseIdent();is.checkLVal(node.local, BIND_LEXICAL);des.push(this.finishNode(node, \"ImportDefaultSpecifier\")); (!this.eat(types.comma)) { return nodes }this.type === types.star) {r node$1 = this.startNode();is.next();is.expectContextual(\"as\");de$1.local = this.parseIdent();is.checkLVal(node$1.local, BIND_LEXICAL);des.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"));turn nodes.expect(types.braceL);e (!this.eat(types.braceR)) { (!first) {this.expect(types.comma);if (this.afterTrailingComma(types.braceR)) { break }else { first = false; }r node$2 = this.startNode();de$2.imported = this.parseIdent(true); (this.eatContextual(\"as\")) {node$2.local = this.parseIdent();else {this.checkUnreserved(node$2.imported);node$2.local = node$2.imported;is.checkLVal(node$2.local, BIND_LEXICAL);des.push(this.finishNode(node$2, \"ImportSpecifier\"));rn nodes `ExpressionStatement#directive` property for directive prologues.daptDirectivePrologue = function(statements) {(var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {atements[i].directive = statements[i].expression.raw.slice(1, -1);sDirectiveCandidate = function(statement) {rn (atement.type === \"ExpressionStatement\" &&atement.expression.type === \"Literal\" &&peof statement.expression.value === \"string\" && Reject parenthesized strings.his.input[statement.start] === \"\\\"\" || this.input[statement.start] === \"'\")$2 = Parser.prototype;vert existing expression atom to assignable patternpossible.oAssignable = function(node, isBinding, refDestructuringErrors) {this.options.ecmaVersion >= 6 && node) {itch (node.type) {se \"Identifier\":if (this.inAsync && node.name === \"await\")  { this.raise(node.start, \"Cannot use 'await' as identifier inside an async function\"); }breakse \"ObjectPattern\":se \"ArrayPattern\":se \"RestElement\":breakse \"ObjectExpression\":node.type = \"ObjectPattern\";if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }for (var i = 0, list = node.properties; i < list.length; i += 1) {  var prop = list[i];this.toAssignable(prop, isBinding);  // Early error:  //   AssignmentRestProperty[Yield, Await] :  //     `...` DestructuringAssignmentTarget[Yield, Await]  //  //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.  if (    prop.type === \"RestElement\" &&    (prop.argument.type === \"ArrayPattern\" || prop.argument.type === \"ObjectPattern\")  ) {    this.raise(prop.argument.start, \"Unexpected token\");  }}breakse \"Property\":// AssignmentProperty has type === \"Property\"if (node.kind !== \"init\") { this.raise(node.key.start, \"Object pattern can't contain getter or setter\"); }this.toAssignable(node.value, isBinding);breakse \"ArrayExpression\":node.type = \"ArrayPattern\";if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }this.toAssignableList(node.elements, isBinding);breakse \"SpreadElement\":node.type = \"RestElement\";this.toAssignable(node.argument, isBinding);if (node.argument.type === \"AssignmentPattern\")  { this.raise(node.argument.start, \"Rest elements cannot have a default value\"); }breakse \"AssignmentExpression\":if (node.operator !== \"=\") { this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\"); }node.type = \"AssignmentPattern\";delete node.operator;this.toAssignable(node.left, isBinding);// falls through to AssignmentPatternse \"AssignmentPattern\":breakse \"ParenthesizedExpression\":this.toAssignable(node.expression, isBinding, refDestructuringErrors);breakse \"MemberExpression\":if (!isBinding) { break }fault:this.raise(node.start, \"Assigning to rvalue\");se if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }rn nodevert list of expression atoms to binding list.oAssignableList = function(exprList, isBinding) {end = exprList.length;(var i = 0; i < end; i++) {r elt = exprList[i]; (elt) { this.toAssignable(elt, isBinding); }end) {r last = exprList[end - 1]; (this.options.ecmaVersion === 6 && isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\"){ this.unexpected(last.argument.start); }rn exprListses spread element.arseSpread = function(refDestructuringErrors) {node = this.startNode();.next();.argument = this.parseMaybeAssign(false, refDestructuringErrors);rn this.finishNode(node, \"SpreadElement\")arseRestBinding = function() {node = this.startNode();.next();estElement inside of a function parameter must be an identifierthis.options.ecmaVersion === 6 && this.type !== types.name)this.unexpected(); }.argument = this.parseBindingAtom();rn this.finishNode(node, \"RestElement\")ses lvalue (assignable) atom.arseBindingAtom = function() {this.options.ecmaVersion >= 6) {itch (this.type) {se types.bracketL:var node = this.startNode();this.next();node.elements = this.parseBindingList(types.bracketR, true, true);return this.finishNode(node, \"ArrayPattern\")se types.braceL:return this.parseObj(true)rn this.parseIdent()arseBindingList = function(close, allowEmpty, allowTrailingComma) {elts = [], first = true;e (!this.eat(close)) { (first) { first = false; }se { this.expect(types.comma); } (allowEmpty && this.type === types.comma) {elts.push(null);else if (allowTrailingComma && this.afterTrailingComma(close)) {breakelse if (this.type === types.ellipsis) {var rest = this.parseRestBinding();this.parseBindingListItem(rest);elts.push(rest);if (this.type === types.comma) { this.raise(this.start, \"Comma is not permitted after the rest element\"); }this.expect(close);breakelse {var elem = this.parseMaybeDefault(this.start, this.startLoc);this.parseBindingListItem(elem);elts.push(elem);rn eltsarseBindingListItem = function(param) {rn paramses assignment pattern around given atom if possible.arseMaybeDefault = function(startPos, startLoc, left) { = left || this.parseBindingAtom();this.options.ecmaVersion < 6 || !this.eat(types.eq)) { return left }node = this.startNodeAt(startPos, startLoc);.left = left;.right = this.parseMaybeAssign();rn this.finishNode(node, \"AssignmentPattern\")ify that a node is an lval — something that can be assigneddingType can be either:r' indicating that the lval creates a 'var' bindingt' indicating that the lval creates a lexical ('let' or 'const') bindingne' indicating that the binding should be checked for illegal identifiers, but not for duplicate referencesheckLVal = function(expr, bindingType, checkClashes) { bindingType === void 0 ) bindingType = BIND_NONE;ch (expr.type) { \"Identifier\": (bindingType === BIND_LEXICAL && expr.name === \"let\"){ this.raiseRecoverable(expr.start, \"let is disallowed as a lexically bound name\"); } (this.strict && this.reservedWordsStrictBind.test(expr.name)){ this.raiseRecoverable(expr.start, (bindingType ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\"); } (checkClashes) {if (has(checkClashes, expr.name))  { this.raiseRecoverable(expr.start, \"Argument name clash\"); }checkClashes[expr.name] = true; (bindingType !== BIND_NONE && bindingType !== BIND_OUTSIDE) { this.declareName(expr.name, bindingType, expr.start); }eak \"MemberExpression\": (bindingType) { this.raiseRecoverable(expr.start, \"Binding member expression\"); }eak \"ObjectPattern\":r (var i = 0, list = expr.properties; i < list.length; i += 1){r prop = list[i];is.checkLVal(prop, bindingType, checkClashes);eak \"Property\": AssignmentProperty has type === \"Property\"is.checkLVal(expr.value, bindingType, checkClashes);eak \"ArrayPattern\":r (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {var elem = list$1[i$1]; (elem) { this.checkLVal(elem, bindingType, checkClashes); }eak \"AssignmentPattern\":is.checkLVal(expr.left, bindingType, checkClashes);eak \"RestElement\":is.checkLVal(expr.argument, bindingType, checkClashes);eak \"ParenthesizedExpression\":is.checkLVal(expr.expression, bindingType, checkClashes);eakult:is.raise(expr.start, (bindingType ? \"Binding\" : \"Assigning to\") + \" rvalue\");ecursive descent parser operates by defining functions for all$3 = Parser.prototype;ck if property name clashes with already added.ect/class getters and setters are not allowed to clash —her with each other or with an init property — and inict mode, init properties are also not allowed to be repeated.heckPropClash = function(prop, propHash, refDestructuringErrors) {this.options.ecmaVersion >= 9 && prop.type === \"SpreadElement\")return }this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))return }key = prop.key;name;ch (key.type) { \"Identifier\": name = key.name; break \"Literal\": name = String(key.value); breakult: returnkind = prop.kind;this.options.ecmaVersion >= 6) { (name === \"__proto__\" && kind === \"init\") {if (propHash.proto) {  if (refDestructuringErrors && refDestructuringErrors.doubleProto < 0) { refDestructuringErrors.doubleProto = key.start; }  // Backwards-compat kludge. Can be removed in version 6.0  else { this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\"); }}propHash.proto = true;turn = \"$\" + name;other = propHash[name];other) {r redefinition; (kind === \"init\") {redefinition = this.strict && other.init || other.get || other.set;else {redefinition = other.init || other[kind]; (redefinition){ this.raiseRecoverable(key.start, \"Redefinition of property\"); }se {her = propHash[name] = {init: false,get: false,set: falser[kind] = true; Expression parsingse nest, from the most general expression type at the top toomic', nondivisible expression types at the bottom. Most of functions will simply let the function(s) below them parse,, *if* the syntactic construct they handle is present, wrap AST node that the inner parser gave them in another node.se a full expression. The optional arguments are used tobid the `in` operator (in for loops initalization expressions) provide reference for storing '=' operator inside shorthandperty assignment in contexts where both object expression object pattern might appear (so it's possible to raiseayed syntax error at correct position).arseExpression = function(noIn, refDestructuringErrors) {startPos = this.start, startLoc = this.startLoc;expr = this.parseMaybeAssign(noIn, refDestructuringErrors);this.type === types.comma) {r node = this.startNodeAt(startPos, startLoc);de.expressions = [expr];ile (this.eat(types.comma)) { node.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors)); }turn this.finishNode(node, \"SequenceExpression\")rn exprse an assignment expression. This includes applications ofrators like `+=`.arseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {this.isContextual(\"yield\")) { (this.inGenerator) { return this.parseYield(noIn) } The tokenizer will assume an expression is allowed after `yield`, but this isn't that kind of yieldse { this.exprAllowed = false; }ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldShorthandAssign = -1;refDestructuringErrors) {dParenAssign = refDestructuringErrors.parenthesizedAssign;dTrailingComma = refDestructuringErrors.trailingComma;dShorthandAssign = refDestructuringErrors.shorthandAssign;fDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.shorthandAssign = -1;se {fDestructuringErrors = new DestructuringErrors;nDestructuringErrors = true;startPos = this.start, startLoc = this.startLoc;this.type === types.parenL || this.type === types.name)this.potentialArrowAt = this.start; }left = this.parseMaybeConditional(noIn, refDestructuringErrors);afterLeftParse) { left = afterLeftParse.call(this, left, startPos, startLoc); }this.type.isAssign) {r node = this.startNodeAt(startPos, startLoc);de.operator = this.value;de.left = this.type === types.eq ? this.toAssignable(left, false, refDestructuringErrors) : left; (!ownDestructuringErrors) { DestructuringErrors.call(refDestructuringErrors); }fDestructuringErrors.shorthandAssign = -1; // reset because shorthand default was used correctlyis.checkLVal(left);is.next();de.right = this.parseMaybeAssign(noIn);turn this.finishNode(node, \"AssignmentExpression\")se { (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors, true); }oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }oldShorthandAssign > -1) { refDestructuringErrors.shorthandAssign = oldShorthandAssign; }rn leftse a ternary conditional (`?:`) operator.arseMaybeConditional = function(noIn, refDestructuringErrors) {startPos = this.start, startLoc = this.startLoc;expr = this.parseExprOps(noIn, refDestructuringErrors);this.checkExpressionErrors(refDestructuringErrors)) { return expr }this.eat(types.question)) {r node = this.startNodeAt(startPos, startLoc);de.test = expr;de.consequent = this.parseMaybeAssign();is.expect(types.colon);de.alternate = this.parseMaybeAssign(noIn);turn this.finishNode(node, \"ConditionalExpression\")rn exprrt the precedence parser.arseExprOps = function(noIn, refDestructuringErrors) {startPos = this.start, startLoc = this.startLoc;expr = this.parseMaybeUnary(refDestructuringErrors, false);this.checkExpressionErrors(refDestructuringErrors)) { return expr }rn expr.start === startPos && expr.type === \"ArrowFunctionExpression\" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn)se binary operators with the operator precedence parsingorithm. `left` is the left-hand side of the operator.nPrec` provides context that allows the function to stop ander further parser to one of its callers when it encounters anrator that has a lower precedence than the set it is parsing.arseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {prec = this.type.binop;prec != null && (!noIn || this.type !== types._in)) { (prec > minPrec) {var logical = this.type === types.logicalOR || this.type === types.logicalAND;var op = this.value;this.next();var startPos = this.start, startLoc = this.startLoc;var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn)rn leftuildBinary = function(startPos, startLoc, left, right, op, logical) {node = this.startNodeAt(startPos, startLoc);.left = left;.operator = op;.right = right;rn this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")se unary operators, both prefix and postfix.arseMaybeUnary = function(refDestructuringErrors, sawUnary) {startPos = this.start, startLoc = this.startLoc, expr;this.isContextual(\"await\") && (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction))) {pr = this.parseAwait();wUnary = true;se if (this.type.prefix) {r node = this.startNode(), update = this.type === types.incDec;de.operator = this.value;de.prefix = true;is.next();de.argument = this.parseMaybeUnary(null, true);is.checkExpressionErrors(refDestructuringErrors, true); (update) { this.checkLVal(node.argument); }se if (this.strict && node.operator === \"delete\" &&       node.argument.type === \"Identifier\"){ this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\"); }se { sawUnary = true; }pr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");se {pr = this.parseExprSubscripts(refDestructuringErrors); (this.checkExpressionErrors(refDestructuringErrors)) { return expr }ile (this.type.postfix && !this.canInsertSemicolon()) {var node$1 = this.startNodeAt(startPos, startLoc);node$1.operator = this.value;node$1.prefix = false;node$1.argument = expr;this.checkLVal(expr);this.next();expr = this.finishNode(node$1, \"UpdateExpression\");!sawUnary && this.eat(types.starstar))return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false) }return expr }se call, dot, and `[]`-subscript expressions.arseExprSubscripts = function(refDestructuringErrors) {startPos = this.start, startLoc = this.startLoc;expr = this.parseExprAtom(refDestructuringErrors);skipArrowSubscripts = expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\";this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) { return expr }result = this.parseSubscripts(expr, startPos, startLoc);refDestructuringErrors && result.type === \"MemberExpression\") { (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; } (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }rn resultarseSubscripts = function(base, startPos, startLoc, noCalls) {maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" &&this.lastTokEnd === base.end && !this.canInsertSemicolon() && this.input.slice(base.start, base.end) === \"async\";e (true) {r element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow); (element === base || element.type === \"ArrowFunctionExpression\") { return element }se = element;arseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow) {computed = this.eat(types.bracketL);computed || this.eat(types.dot)) {r node = this.startNodeAt(startPos, startLoc);de.object = base;de.property = computed ? this.parseExpression() : this.parseIdent(this.options.allowReserved !== \"never\");de.computed = !!computed; (computed) { this.expect(types.bracketR); }se = this.finishNode(node, \"MemberExpression\");se if (!noCalls && this.eat(types.parenL)) {r refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;is.yieldPos = 0;is.awaitPos = 0;is.awaitIdentPos = 0;r exprList = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors); (maybeAsyncArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {this.checkPatternErrors(refDestructuringErrors, false);this.checkYieldAwaitInDefaultParams();if (this.awaitIdentPos > 0)  { this.raise(this.awaitIdentPos, \"Cannot use 'await' as identifier inside an async function\"); }this.yieldPos = oldYieldPos;this.awaitPos = oldAwaitPos;this.awaitIdentPos = oldAwaitIdentPos;return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true)is.checkExpressionErrors(refDestructuringErrors, true);is.yieldPos = oldYieldPos || this.yieldPos;is.awaitPos = oldAwaitPos || this.awaitPos;is.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;r node$1 = this.startNodeAt(startPos, startLoc);de$1.callee = base;de$1.arguments = exprList;se = this.finishNode(node$1, \"CallExpression\");se if (this.type === types.backQuote) {r node$2 = this.startNodeAt(startPos, startLoc);de$2.tag = base;de$2.quasi = this.parseTemplate({isTagged: true});se = this.finishNode(node$2, \"TaggedTemplateExpression\");rn basese an atomic expression — either a single token that is anression, an expression started by a keyword like `function` orw`, or an expression wrapped in punctuation like `()`, `[]`,`{}`.arseExprAtom = function(refDestructuringErrors) {f a division operator appears in an expression position, theokenizer got confused, and we force it to read a regexp instead.this.type === types.slash) { this.readRegexp(); }node, canBeArrow = this.potentialArrowAt === this.start;ch (this.type) { types._super: (!this.allowSuper){ this.raise(this.start, \"'super' keyword outside a method\"); }de = this.startNode();is.next(); (this.type === types.parenL && !this.allowDirectSuper){ this.raise(node.start, \"super() call outside constructor of a subclass\"); } The `super` keyword can appear at below: SuperProperty:     super [ Expression ]     super . IdentifierName SuperCall:     super ( Arguments ) (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL){ this.unexpected(); }turn this.finishNode(node, \"Super\") types._this:de = this.startNode();is.next();turn this.finishNode(node, \"ThisExpression\") types.name:r startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;r id = this.parseIdent(false); (this.options.ecmaVersion >= 8 && !containsEsc && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(types._function)){ return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true) } (canBeArrow && !this.canInsertSemicolon()) {if (this.eat(types.arrow))  { return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false) }if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === types.name && !containsEsc) {  id = this.parseIdent(false);  if (this.canInsertSemicolon() || !this.eat(types.arrow))    { this.unexpected(); }  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true)}turn id types.regexp:r value = this.value;de = this.parseLiteral(value.value);de.regex = {pattern: value.pattern, flags: value.flags};turn node types.num: case types.string:turn this.parseLiteral(this.value) types._null: case types._true: case types._false:de = this.startNode();de.value = this.type === types._null ? null : this.type === types._true;de.raw = this.type.keyword;is.next();turn this.finishNode(node, \"Literal\") types.parenL:r start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow); (refDestructuringErrors) {if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))  { refDestructuringErrors.parenthesizedAssign = start; }if (refDestructuringErrors.parenthesizedBind < 0)  { refDestructuringErrors.parenthesizedBind = start; }turn expr types.bracketL:de = this.startNode();is.next();de.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);turn this.finishNode(node, \"ArrayExpression\") types.braceL:turn this.parseObj(false, refDestructuringErrors) types._function:de = this.startNode();is.next();turn this.parseFunction(node, 0) types._class:turn this.parseClass(this.startNode(), false) types._new:turn this.parseNew() types.backQuote:turn this.parseTemplate() types._import: (this.options.ecmaVersion >= 11) {return this.parseExprImport()else {return this.unexpected()ult:is.unexpected();arseExprImport = function() {node = this.startNode();.next(); // skip `import`ch (this.type) { types.parenL:turn this.parseDynamicImport(node)ult:is.unexpected();arseDynamicImport = function(node) {.next(); // skip `(`arse node.source..source = this.parseMaybeAssign();erify ending.!this.eat(types.parenR)) {r errorPos = this.start; (this.eat(types.comma) && this.eat(types.parenR)) {this.raiseRecoverable(errorPos, \"Trailing comma is not allowed in import()\");else {this.unexpected(errorPos);rn this.finishNode(node, \"ImportExpression\")arseLiteral = function(value) {node = this.startNode();.value = value;.raw = this.input.slice(this.start, this.end);node.raw.charCodeAt(node.raw.length - 1) === 110) { node.bigint = node.raw.slice(0, -1); }.next();rn this.finishNode(node, \"Literal\")arseParenExpression = function() {.expect(types.parenL);val = this.parseExpression();.expect(types.parenR);rn valarseParenAndDistinguishExpression = function(canBeArrow) {startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;this.options.ecmaVersion >= 6) {is.next();r innerStartPos = this.start, innerStartLoc = this.startLoc;r exprList = [], first = true, lastIsComma = false;r refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;is.yieldPos = 0;is.awaitPos = 0; Do not save awaitIdentPos to allow checking awaits nested in parametersile (this.type !== types.parenR) {first ? first = false : this.expect(types.comma);if (allowTrailingComma && this.afterTrailingComma(types.parenR, true)) {  lastIsComma = true;  break} else if (this.type === types.ellipsis) {  spreadStart = this.start;  exprList.push(this.parseParenItem(this.parseRestBinding()));  if (this.type === types.comma) { this.raise(this.start, \"Comma is not permitted after the rest element\"); }  break} else {  exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));}r innerEndPos = this.start, innerEndLoc = this.startLoc;is.expect(types.parenR); (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {this.checkPatternErrors(refDestructuringErrors, false);this.checkYieldAwaitInDefaultParams();this.yieldPos = oldYieldPos;this.awaitPos = oldAwaitPos;return this.parseParenArrowList(startPos, startLoc, exprList) (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); } (spreadStart) { this.unexpected(spreadStart); }is.checkExpressionErrors(refDestructuringErrors, true);is.yieldPos = oldYieldPos || this.yieldPos;is.awaitPos = oldAwaitPos || this.awaitPos; (exprList.length > 1) {val = this.startNodeAt(innerStartPos, innerStartLoc);val.expressions = exprList;this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);else {val = exprList[0];se {l = this.parseParenExpression();this.options.preserveParens) {r par = this.startNodeAt(startPos, startLoc);r.expression = val;turn this.finishNode(par, \"ParenthesizedExpression\")se {turn valarseParenItem = function(item) {rn itemarseParenArrowList = function(startPos, startLoc, exprList) {rn this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)'s precedence is slightly tricky. It must allow its argument toa `[]` or dot subscript expression, but not a call — at least, without wrapping it in parentheses. Thus, it uses the noCallsument to parseSubscripts to prevent it from consuming theument list.pty$1 = [];arseNew = function() {node = this.startNode();meta = this.parseIdent(true);this.options.ecmaVersion >= 6 && this.eat(types.dot)) {de.meta = meta;r containsEsc = this.containsEsc;de.property = this.parseIdent(true); (node.property.name !== \"target\" || containsEsc){ this.raiseRecoverable(node.property.start, \"The only valid meta property for new is new.target\"); } (!this.inNonArrowFunction()){ this.raiseRecoverable(node.start, \"new.target can only be used in functions\"); }turn this.finishNode(node, \"MetaProperty\")startPos = this.start, startLoc = this.startLoc, isImport = this.type === types._import;.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);isImport && node.callee.type === \"ImportExpression\") {is.raise(startPos, \"Cannot use new with import()\");this.eat(types.parenL)) { node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false); } { node.arguments = empty$1; }rn this.finishNode(node, \"NewExpression\")se template expression.arseTemplateElement = function(ref) {isTagged = ref.isTagged;elem = this.startNode();this.type === types.invalidTemplate) { (!isTagged) {this.raiseRecoverable(this.start, \"Bad escape sequence in untagged template literal\");em.value = {raw: this.value,cooked: nullse {em.value = {raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, \"\\n\"),cooked: this.value.next();.tail = this.type === types.backQuote;rn this.finishNode(elem, \"TemplateElement\")arseTemplate = function(ref) { ref === void 0 ) ref = {};isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;node = this.startNode();.next();.expressions = [];curElt = this.parseTemplateElement({isTagged: isTagged});.quasis = [curElt];e (!curElt.tail) { (this.type === types.eof) { this.raise(this.pos, \"Unterminated template literal\"); }is.expect(types.dollarBraceL);de.expressions.push(this.parseExpression());is.expect(types.braceR);de.quasis.push(curElt = this.parseTemplateElement({isTagged: isTagged}));.next();rn this.finishNode(node, \"TemplateLiteral\")sAsyncProp = function(prop) {rn !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" &&his.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types.star)) &&ineBreak.test(this.input.slice(this.lastTokEnd, this.start))se an object literal or binding pattern.arseObj = function(isPattern, refDestructuringErrors) {node = this.startNode(), first = true, propHash = {};.properties = [];.next();e (!this.eat(types.braceR)) { (!first) {this.expect(types.comma);if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types.braceR)) { break }else { first = false; }r prop = this.parseProperty(isPattern, refDestructuringErrors); (!isPattern) { this.checkPropClash(prop, propHash, refDestructuringErrors); }de.properties.push(prop);rn this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")arseProperty = function(isPattern, refDestructuringErrors) {prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) { (isPattern) {prop.argument = this.parseIdent(false);if (this.type === types.comma) {  this.raise(this.start, \"Comma is not permitted after the rest element\");}return this.finishNode(prop, \"RestElement\") To disallow parenthesized identifier via `this.toAssignable()`. (this.type === types.parenL && refDestructuringErrors) {if (refDestructuringErrors.parenthesizedAssign < 0) {  refDestructuringErrors.parenthesizedAssign = this.start;}if (refDestructuringErrors.parenthesizedBind < 0) {  refDestructuringErrors.parenthesizedBind = this.start;} Parse argument.op.argument = this.parseMaybeAssign(false, refDestructuringErrors); To disallow trailing comma via `this.toAssignable()`. (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {refDestructuringErrors.trailingComma = this.start; Finishturn this.finishNode(prop, \"SpreadElement\")this.options.ecmaVersion >= 6) {op.method = false;op.shorthand = false; (isPattern || refDestructuringErrors) {startPos = this.start;startLoc = this.startLoc; (!isPattern){ isGenerator = this.eat(types.star); }containsEsc = this.containsEsc;.parsePropertyName(prop);!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {Async = true;Generator = this.options.ecmaVersion >= 9 && this.eat(types.star);is.parsePropertyName(prop, refDestructuringErrors);se {Async = false;.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);rn this.finishNode(prop, \"Property\")arsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {(isGenerator || isAsync) && this.type === types.colon)this.unexpected(); }this.eat(types.colon)) {op.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);op.kind = \"init\";se if (this.options.ecmaVersion >= 6 && this.type === types.parenL) { (isPattern) { this.unexpected(); }op.kind = \"init\";op.method = true;op.value = this.parseMethod(isGenerator, isAsync);se if (!isPattern && !containsEsc &&       this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&       (prop.key.name === \"get\" || prop.key.name === \"set\") &&       (this.type !== types.comma && this.type !== types.braceR)) { (isGenerator || isAsync) { this.unexpected(); }op.kind = prop.key.name;is.parsePropertyName(prop);op.value = this.parseMethod(false);r paramCount = prop.kind === \"get\" ? 0 : 1; (prop.value.params.length !== paramCount) {var start = prop.value.start;if (prop.kind === \"get\")  { this.raiseRecoverable(start, \"getter should have no params\"); }else  { this.raiseRecoverable(start, \"setter should have exactly one param\"); }else {if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")  { this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\"); }se if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") { (isGenerator || isAsync) { this.unexpected(); }is.checkUnreserved(prop.key); (prop.key.name === \"await\" && !this.awaitIdentPos){ this.awaitIdentPos = startPos; }op.kind = \"init\"; (isPattern) {prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);else if (this.type === types.eq && refDestructuringErrors) {if (refDestructuringErrors.shorthandAssign < 0)  { refDestructuringErrors.shorthandAssign = this.start; }prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);else {prop.value = prop.key;op.shorthand = true;se { this.unexpected(); }arsePropertyName = function(prop) {this.options.ecmaVersion >= 6) { (this.eat(types.bracketL)) {prop.computed = true;prop.key = this.parseMaybeAssign();this.expect(types.bracketR);return prop.keyelse {prop.computed = false;rn prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== \"never\")tialize empty function node.nitFunction = function(node) {.id = null;this.options.ecmaVersion >= 6) { node.generator = node.expression = false; }this.options.ecmaVersion >= 8) { node.async = false; }se object or class method.arseMethod = function(isGenerator, isAsync, allowDirectSuper) {node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;.initFunction(node);this.options.ecmaVersion >= 6)node.generator = isGenerator; }this.options.ecmaVersion >= 8)node.async = !!isAsync; }.yieldPos = 0;.awaitPos = 0;.awaitIdentPos = 0;.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));.expect(types.parenL);.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);.checkYieldAwaitInDefaultParams();.parseFunctionBody(node, false, true);.yieldPos = oldYieldPos;.awaitPos = oldAwaitPos;.awaitIdentPos = oldAwaitIdentPos;rn this.finishNode(node, \"FunctionExpression\")se arrow function expression with given parameters.arseArrowExpression = function(node, params, isAsync) {oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);.initFunction(node);this.options.ecmaVersion >= 8) { node.async = !!isAsync; }.yieldPos = 0;.awaitPos = 0;.awaitIdentPos = 0;.params = this.toAssignableList(params, true);.parseFunctionBody(node, true, false);.yieldPos = oldYieldPos;.awaitPos = oldAwaitPos;.awaitIdentPos = oldAwaitIdentPos;rn this.finishNode(node, \"ArrowFunctionExpression\")se function body and check parameters.arseFunctionBody = function(node, isArrowFunction, isMethod) {isExpression = isArrowFunction && this.type !== types.braceL;oldStrict = this.strict, useStrict = false;isExpression) {de.body = this.parseMaybeAssign();de.expression = true;is.checkParams(node, false);se {r nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params); (!oldStrict || nonSimple) {useStrict = this.strictDirective(this.end);// If this is a strict mode function, verify that argument names// are not repeated, and it does not try to bind the words `eval`// or `arguments`.if (useStrict && nonSimple)  { this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\"); } Start a new scope with regard to labels and the `inFunction` flag (restore them to their old value afterwards).r oldLabels = this.labels;is.labels = []; (useStrict) { this.strict = true; } Add the params to varDeclaredNames to ensure that an error is thrown if a let/const declaration in the function clashes with one of the params.is.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));de.body = this.parseBlock(false);de.expression = false;is.adaptDirectivePrologue(node.body.body);is.labels = oldLabels;.exitScope();nsure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'this.strict && node.id) { this.checkLVal(node.id, BIND_OUTSIDE); }.strict = oldStrict;sSimpleParamList = function(params) {(var i = 0, list = params; i < list.length; i += 1)r param = list[i]; (param.type !== \"Identifier\") { return falsern truecks function params for various disallowed patterns such as using \"eval\"\"arguments\" and duplicate parameters.heckParams = function(node, allowDuplicates) {nameHash = {};(var i = 0, list = node.params; i < list.length; i += 1)r param = list[i];is.checkLVal(param, BIND_VAR, allowDuplicates ? null : nameHash);ses a comma-separated list of expressions, and returns them asarray. `close` is the token type that ends the list, andlowEmpty` can be turned on to allow subsequent commas withhing in between them to be parsed as `null` (which is needed array literals).arseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {elts = [], first = true;e (!this.eat(close)) { (!first) {this.expect(types.comma);if (allowTrailingComma && this.afterTrailingComma(close)) { break }else { first = false; }r elt = (void 0); (allowEmpty && this.type === types.comma){ elt = null; }se if (this.type === types.ellipsis) {elt = this.parseSpread(refDestructuringErrors);if (refDestructuringErrors && this.type === types.comma && refDestructuringErrors.trailingComma < 0)  { refDestructuringErrors.trailingComma = this.start; }else {elt = this.parseMaybeAssign(false, refDestructuringErrors);ts.push(elt);rn eltsheckUnreserved = function(ref) {start = ref.start;end = ref.end;name = ref.name;this.inGenerator && name === \"yield\")this.raiseRecoverable(start, \"Cannot use 'yield' as identifier inside a generator\"); }this.inAsync && name === \"await\")this.raiseRecoverable(start, \"Cannot use 'await' as identifier inside an async function\"); }this.keywords.test(name))this.raise(start, (\"Unexpected keyword '\" + name + \"'\")); }this.options.ecmaVersion < 6 &&is.input.slice(start, end).indexOf(\"\\\\\") !== -1) { return }re = this.strict ? this.reservedWordsStrict : this.reservedWords;re.test(name)) { (!this.inAsync && name === \"await\"){ this.raiseRecoverable(start, \"Cannot use keyword 'await' outside an async function\"); }is.raiseRecoverable(start, (\"The keyword '\" + name + \"' is reserved\"));se the next token as an identifier. If `liberal` is true (usedn parsing properties), it will also convert keywords intontifiers.arseIdent = function(liberal, isBinding) {node = this.startNode();this.type === types.name) {de.name = this.value;se if (this.type.keyword) {de.name = this.type.keyword; To fix https://github.com/acornjs/acorn/issues/575 `class` and `function` keywords push new context into this.context. But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name. If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword ((node.name === \"class\" || node.name === \"function\") &&  (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {this.context.pop();se {is.unexpected();.next();.finishNode(node, \"Identifier\");!liberal) {is.checkUnreserved(node); (node.name === \"await\" && !this.awaitIdentPos){ this.awaitIdentPos = node.start; }rn nodeses yield expression inside generator.arseYield = function(noIn) {!this.yieldPos) { this.yieldPos = this.start; }node = this.startNode();.next();this.type === types.semi || this.canInsertSemicolon() || (this.type !== types.star && !this.type.startsExpr)) {de.delegate = false;de.argument = null;se {de.delegate = this.eat(types.star);de.argument = this.parseMaybeAssign(noIn);rn this.finishNode(node, \"YieldExpression\")arseAwait = function() {!this.awaitPos) { this.awaitPos = this.start; }node = this.startNode();.next();.argument = this.parseMaybeUnary(null, true);rn this.finishNode(node, \"AwaitExpression\")$4 = Parser.prototype;s function is used to raise exceptions on parse errors. Ites an offset integer (into the current `input`) to indicate location of the error, attaches the position to the endthe error message, and then raises a `SyntaxError` with thatsage.aise = function(pos, message) {loc = getLineInfo(this.input, pos);age += \" (\" + loc.line + \":\" + loc.column + \")\";err = new SyntaxError(message);pos = pos; err.loc = loc; err.raisedAt = this.pos;w erraiseRecoverable = pp$4.raise;urPosition = function() {this.options.locations) {turn new Position(this.curLine, this.pos - this.lineStart)$5 = Parser.prototype;ope = function Scope(flags) {.flags = flags; list of var-declared names in the current lexical scope.var = []; list of lexically-declared names in the current lexical scope.lexical = []; list of lexically-declared FunctionDeclaration names in the current lexical scope.functions = []; functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.nterScope = function(flags) {.scopeStack.push(new Scope(flags));xitScope = function() {.scopeStack.pop(); spec says:t the top level of a function, or script, function declarations arereated like var declarations rather than like lexical declarations.reatFunctionsAsVarInScope = function(scope) {rn (scope.flags & SCOPE_FUNCTION) || !this.inModule && (scope.flags & SCOPE_TOP)eclareName = function(name, bindingType, pos) {redeclared = false;bindingType === BIND_LEXICAL) {r scope = this.currentScope();declared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;ope.lexical.push(name); (this.inModule && (scope.flags & SCOPE_TOP)){ delete this.undefinedExports[name]; }se if (bindingType === BIND_SIMPLE_CATCH) {r scope$1 = this.currentScope();ope$1.lexical.push(name);se if (bindingType === BIND_FUNCTION) {r scope$2 = this.currentScope(); (this.treatFunctionsAsVar){ redeclared = scope$2.lexical.indexOf(name) > -1; }se{ redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1; }ope$2.functions.push(name);se {r (var i = this.scopeStack.length - 1; i >= 0; --i) {var scope$3 = this.scopeStack[i];if (scope$3.lexical.indexOf(name) > -1 && !((scope$3.flags & SCOPE_SIMPLE_CATCH) && scope$3.lexical[0] === name) ||    !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {  redeclared = true;  break}scope$3.var.push(name);if (this.inModule && (scope$3.flags & SCOPE_TOP))  { delete this.undefinedExports[name]; }if (scope$3.flags & SCOPE_VAR) { break }redeclared) { this.raiseRecoverable(pos, (\"Identifier '\" + name + \"' has already been declared\")); }heckLocalExport = function(id) {cope.functions must be empty as Module code is always strict.this.scopeStack[0].lexical.indexOf(id.name) === -1 &&this.scopeStack[0].var.indexOf(id.name) === -1) {is.undefinedExports[id.name] = id;urrentScope = function() {rn this.scopeStack[this.scopeStack.length - 1]urrentVarScope = function() {(var i = this.scopeStack.length - 1;; i--) {r scope = this.scopeStack[i]; (scope.flags & SCOPE_VAR) { return scope }ld be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.urrentThisScope = function() {(var i = this.scopeStack.length - 1;; i--) {r scope = this.scopeStack[i]; (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) { return scope }de = function Node(parser, pos, loc) {.type = \"\";.start = pos;.end = 0;parser.options.locations)this.loc = new SourceLocation(parser, loc); }parser.options.directSourceFile)this.sourceFile = parser.options.directSourceFile; }parser.options.ranges)this.range = [pos, 0]; }rt an AST node, attaching a start offset.$6 = Parser.prototype;tartNode = function() {rn new Node(this, this.start, this.startLoc)tartNodeAt = function(pos, loc) {rn new Node(this, pos, loc)ish an AST node, adding `type` and `end` properties.on finishNodeAt(node, type, pos, loc) {.type = type;.end = pos;this.options.locations)node.loc.end = loc; }this.options.ranges)node.range[1] = pos; }rn nodeinishNode = function(node, type) {rn finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)ish node at given positioninishNodeAt = function(node, type, pos, loc) {rn finishNodeAt.call(this, node, type, pos, loc) algorithm used to determine whether a regexp can appear at akContext = function TokContext(token, isExpr, preserveSpace, override, generator) {.token = token;.isExpr = !!isExpr;.preserveSpace = !!preserveSpace;.override = override;.generator = !!generator;pes$1 = {at: new TokContext(\"{\", false),pr: new TokContext(\"{\", true),pl: new TokContext(\"${\", false),at: new TokContext(\"(\", false),pr: new TokContext(\"(\", true),pl: new TokContext(\"`\", true, true, function (p) { return p.tryReadTemplateToken(); }),at: new TokContext(\"function\", false),pr: new TokContext(\"function\", true),pr_gen: new TokContext(\"function\", true, false, null, true),n: new TokContext(\"function\", false, false, null, true)$7 = Parser.prototype;nitialContext = function() {rn [types$1.b_stat]raceIsBlock = function(prevType) {parent = this.curContext();parent === types$1.f_expr || parent === types$1.f_stat)return true }prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr))return !parent.isExpr }he check for `tt.name && exprAllowed` detects whether we arefter a `yield` or `of` construct. See the `updateContext` fortt.name`.prevType === types._return || prevType === types.name && this.exprAllowed)return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow)return true }prevType === types.braceL)return parent === types$1.b_stat }prevType === types._var || prevType === types._const || prevType === types.name)return false }rn !this.exprAllowednGeneratorContext = function() {(var i = this.context.length - 1; i >= 1; i--) {r context = this.context[i]; (context.token === \"function\"){ return context.generator }rn falsepdateContext = function(prevType) {update, type = this.type;type.keyword && prevType === types.dot)this.exprAllowed = false; } if (update = type.updateContext)update.call(this, prevType); }this.exprAllowed = type.beforeExpr; }en-specific context update codeparenR.updateContext = types.braceR.updateContext = function() {this.context.length === 1) {is.exprAllowed = true;turnout = this.context.pop();out === types$1.b_stat && this.curContext().token === \"function\") {t = this.context.pop();.exprAllowed = !out.isExpr;braceL.updateContext = function(prevType) {.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);.exprAllowed = true;dollarBraceL.updateContext = function() {.context.push(types$1.b_tmpl);.exprAllowed = true;parenL.updateContext = function(prevType) {statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;.context.push(statementParens ? types$1.p_stat : types$1.p_expr);.exprAllowed = true;incDec.updateContext = function() {okExprAllowed stays unchanged_function.updateContext = types._class.updateContext = function(prevType) {prevType.beforeExpr && prevType !== types.semi && prevType !== types._else &&!(prevType === types._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) &&!((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat))this.context.push(types$1.f_expr); }this.context.push(types$1.f_stat); }.exprAllowed = false;backQuote.updateContext = function() {this.curContext() === types$1.q_tmpl)this.context.pop(); }this.context.push(types$1.q_tmpl); }.exprAllowed = false;star.updateContext = function(prevType) {prevType === types._function) {r index = this.context.length - 1; (this.context[index] === types$1.f_expr){ this.context[index] = types$1.f_expr_gen; }se{ this.context[index] = types$1.f_gen; }.exprAllowed = true;name.updateContext = function(prevType) {allowed = false;this.options.ecmaVersion >= 6 && prevType !== types.dot) { (this.value === \"of\" && !this.exprAllowed ||  this.value === \"yield\" && this.inGeneratorContext()){ allowed = true; }.exprAllowed = allowed;s file contains Unicode properties extracted from the ECMAScriptcification. The lists are extracted like so:'#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)ble-binary-unicode-propertiesma9BinaryProperties = \"ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS\";ma10BinaryProperties = ecma9BinaryProperties + \" Extended_Pictographic\";ma11BinaryProperties = ecma10BinaryProperties;icodeBinaryProperties = {cma9BinaryProperties,ecma10BinaryProperties,ecma11BinaryPropertiesble-unicode-general-category-valuesicodeGeneralCategoryValues = \"Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu\";ble-unicode-script-valuesma9ScriptValues = \"Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb\";ma10ScriptValues = ecma9ScriptValues + \" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd\";ma11ScriptValues = ecma10ScriptValues + \" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho\";icodeScriptValues = {cma9ScriptValues,ecma10ScriptValues,ecma11ScriptValuesta = {};on buildUnicodeData(ecmaVersion) {d = data[ecmaVersion] = {nary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + \" \" + unicodeGeneralCategoryValues),nBinary: {General_Category: wordsRegexp(unicodeGeneralCategoryValues),Script: wordsRegexp(unicodeScriptValues[ecmaVersion])nBinary.Script_Extensions = d.nonBinary.Script;nBinary.gc = d.nonBinary.General_Category;nBinary.sc = d.nonBinary.Script;nBinary.scx = d.nonBinary.Script_Extensions;nicodeData(9);nicodeData(10);nicodeData(11);$8 = Parser.prototype;gExpValidationState = function RegExpValidationState(parser) {.parser = parser;.validFlags = \"gim\" + (parser.options.ecmaVersion >= 6 ? \"uy\" : \"\") + (parser.options.ecmaVersion >= 9 ? \"s\" : \"\");.unicodeProperties = data[parser.options.ecmaVersion >= 11 ? 11 : parser.options.ecmaVersion];.source = \"\";.flags = \"\";.start = 0;.switchU = false;.switchN = false;.pos = 0;.lastIntValue = 0;.lastStringValue = \"\";.lastAssertionIsQuantifiable = false;.numCapturingParens = 0;.maxBackReference = 0;.groupNames = [];.backReferenceNames = [];ValidationState.prototype.reset = function reset (start, pattern, flags) {unicode = flags.indexOf(\"u\") !== -1;.start = start | 0;.source = pattern + \"\";.flags = flags;.switchU = unicode && this.parser.options.ecmaVersion >= 6;.switchN = unicode && this.parser.options.ecmaVersion >= 9;ValidationState.prototype.raise = function raise (message) {.parser.raiseRecoverable(this.start, (\"Invalid regular expression: /\" + (this.source) + \"/: \" + message));u flag is given, this returns the code point at the index (it combines a surrogate pair).erwise, this returns the code unit of the index (can be a part of a surrogate pair).ValidationState.prototype.at = function at (i) {s = this.source;l = s.length;i >= l) {turn -1c = s.charCodeAt(i);!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {turn crn (c << 10) + s.charCodeAt(i + 1) - 0x35FDC00ValidationState.prototype.nextIndex = function nextIndex (i) {s = this.source;l = s.length;i >= l) {turn lc = s.charCodeAt(i);!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {turn i + 1rn i + 2ValidationState.prototype.current = function current () {rn this.at(this.pos)ValidationState.prototype.lookahead = function lookahead () {rn this.at(this.nextIndex(this.pos))ValidationState.prototype.advance = function advance () {.pos = this.nextIndex(this.pos);ValidationState.prototype.eat = function eat (ch) {this.current() === ch) {is.advance();turn truern falseon codePointToString(ch) {ch <= 0xFFFF) { return String.fromCharCode(ch) }= 0x10000;rn String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00)idate the flags part of a given RegExpLiteral.ram {RegExpValidationState} state The state to validate RegExp.turns {void}alidateRegExpFlags = function(state) {validFlags = state.validFlags;flags = state.flags;(var i = 0; i < flags.length; i++) {r flag = flags.charAt(i); (validFlags.indexOf(flag) === -1) {this.raise(state.start, \"Invalid regular expression flag\"); (flags.indexOf(flag, i + 1) > -1) {this.raise(state.start, \"Duplicate regular expression flag\");idate the pattern part of a given RegExpLiteral.ram {RegExpValidationState} state The state to validate RegExp.turns {void}alidateRegExpPattern = function(state) {.regexp_pattern(state);he goal symbol for the parse is |Pattern[~U, ~N]|. If the result ofarsing contains a |GroupName|, reparse with the goal symbolPattern[~U, +N]| and use this result instead. Throw a *SyntaxError*xception if _P_ did not conform to the grammar, if any elements of _P_ere not matched by the parse, or if any Early Error conditions exist.!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {ate.switchN = true;is.regexp_pattern(state);ps://www.ecma-international.org/ecma-262/8.0/#prod-Patternegexp_pattern = function(state) {e.pos = 0;e.lastIntValue = 0;e.lastStringValue = \"\";e.lastAssertionIsQuantifiable = false;e.numCapturingParens = 0;e.maxBackReference = 0;e.groupNames.length = 0;e.backReferenceNames.length = 0;.regexp_disjunction(state);state.pos !== state.source.length) { Make the same messages as V8. (state.eat(0x29 /* ) */)) {state.raise(\"Unmatched ')'\"); (state.eat(0x5D /* [ */) || state.eat(0x7D /* } */)) {state.raise(\"Lone quantifier brackets\");state.maxBackReference > state.numCapturingParens) {ate.raise(\"Invalid escape\");(var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {r name = list[i]; (state.groupNames.indexOf(name) === -1) {state.raise(\"Invalid named capture referenced\");ps://www.ecma-international.org/ecma-262/8.0/#prod-Disjunctionegexp_disjunction = function(state) {.regexp_alternative(state);e (state.eat(0x7C /* | */)) {is.regexp_alternative(state);ake the same message as V8.this.regexp_eatQuantifier(state, true)) {ate.raise(\"Nothing to repeat\");state.eat(0x7B /* { */)) {ate.raise(\"Lone quantifier brackets\");ps://www.ecma-international.org/ecma-262/8.0/#prod-Alternativeegexp_alternative = function(state) {e (state.pos < state.source.length && this.regexp_eatTerm(state))}ps://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Termegexp_eatTerm = function(state) {this.regexp_eatAssertion(state)) { Handle `QuantifiableAssertion Quantifier` alternative. `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion is a QuantifiableAssertion. (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {// Make the same message as V8.if (state.switchU) {  state.raise(\"Invalid quantifier\");}turn truestate.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {is.regexp_eatQuantifier(state);turn truern falseps://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertionegexp_eatAssertion = function(state) {start = state.pos;e.lastAssertionIsQuantifiable = false;, $state.eat(0x5E /* ^ */) || state.eat(0x24 /* $ */)) {turn trueb \\Bstate.eat(0x5C /* \\ */)) { (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {return trueate.pos = start;ookahead / Lookbehindstate.eat(0x28 /* ( */) && state.eat(0x3F /* ? */)) {r lookbehind = false; (this.options.ecmaVersion >= 9) {lookbehind = state.eat(0x3C /* < */); (state.eat(0x3D /* = */) || state.eat(0x21 /* ! */)) {this.regexp_disjunction(state);if (!state.eat(0x29 /* ) */)) {  state.raise(\"Unterminated group\");}state.lastAssertionIsQuantifiable = !lookbehind;return truee.pos = start;rn falseps://www.ecma-international.org/ecma-262/8.0/#prod-Quantifieregexp_eatQuantifier = function(state, noError) { noError === void 0 ) noError = false;this.regexp_eatQuantifierPrefix(state, noError)) {ate.eat(0x3F /* ? */);turn truern falseps://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefixegexp_eatQuantifierPrefix = function(state, noError) {rn (ate.eat(0x2A /* * */) ||ate.eat(0x2B /* + */) ||ate.eat(0x3F /* ? */) ||is.regexp_eatBracedQuantifier(state, noError)egexp_eatBracedQuantifier = function(state, noError) {start = state.pos;state.eat(0x7B /* { */)) {r min = 0, max = -1; (this.regexp_eatDecimalDigits(state)) {min = state.lastIntValue;if (state.eat(0x2C /* , */) && this.regexp_eatDecimalDigits(state)) {  max = state.lastIntValue;}if (state.eat(0x7D /* } */)) {  // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term  if (max !== -1 && max < min && !noError) {    state.raise(\"numbers out of order in {} quantifier\");  }  return true} (state.switchU && !noError) {state.raise(\"Incomplete quantifier\");ate.pos = start;rn falseps://www.ecma-international.org/ecma-262/8.0/#prod-Atomegexp_eatAtom = function(state) {rn (is.regexp_eatPatternCharacters(state) ||ate.eat(0x2E /* . */) ||is.regexp_eatReverseSolidusAtomEscape(state) ||is.regexp_eatCharacterClass(state) ||is.regexp_eatUncapturingGroup(state) ||is.regexp_eatCapturingGroup(state)egexp_eatReverseSolidusAtomEscape = function(state) {start = state.pos;state.eat(0x5C /* \\ */)) { (this.regexp_eatAtomEscape(state)) {return trueate.pos = start;rn falseegexp_eatUncapturingGroup = function(state) {start = state.pos;state.eat(0x28 /* ( */)) { (state.eat(0x3F /* ? */) && state.eat(0x3A /* : */)) {this.regexp_disjunction(state);if (state.eat(0x29 /* ) */)) {  return true}state.raise(\"Unterminated group\");ate.pos = start;rn falseegexp_eatCapturingGroup = function(state) {state.eat(0x28 /* ( */)) { (this.options.ecmaVersion >= 9) {this.regexp_groupSpecifier(state);else if (state.current() === 0x3F /* ? */) {state.raise(\"Invalid group\");is.regexp_disjunction(state); (state.eat(0x29 /* ) */)) {state.numCapturingParens += 1;return trueate.raise(\"Unterminated group\");rn falseps://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtomegexp_eatExtendedAtom = function(state) {rn (ate.eat(0x2E /* . */) ||is.regexp_eatReverseSolidusAtomEscape(state) ||is.regexp_eatCharacterClass(state) ||is.regexp_eatUncapturingGroup(state) ||is.regexp_eatCapturingGroup(state) ||is.regexp_eatInvalidBracedQuantifier(state) ||is.regexp_eatExtendedPatternCharacter(state)ps://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifieregexp_eatInvalidBracedQuantifier = function(state) {this.regexp_eatBracedQuantifier(state, true)) {ate.raise(\"Nothing to repeat\");rn falseps://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacteregexp_eatSyntaxCharacter = function(state) {ch = state.current();isSyntaxCharacter(ch)) {ate.lastIntValue = ch;ate.advance();turn truern falseon isSyntaxCharacter(ch) {rn ( === 0x24 /* $ */ || >= 0x28 /* ( */ && ch <= 0x2B /* + */ || === 0x2E /* . */ || === 0x3F /* ? */ || >= 0x5B /* [ */ && ch <= 0x5E /* ^ */ || >= 0x7B /* { */ && ch <= 0x7D /* } */ps://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter eat eager.egexp_eatPatternCharacters = function(state) {start = state.pos;ch = 0;e ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {ate.advance();rn state.pos !== startps://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacteregexp_eatExtendedPatternCharacter = function(state) {ch = state.current(); !== -1 && !== 0x24 /* $ */ &&ch >= 0x28 /* ( */ && ch <= 0x2B /* + */) && !== 0x2E /* . */ && !== 0x3F /* ? */ && !== 0x5B /* [ */ && !== 0x5E /* ^ */ && !== 0x7C /* | */ate.advance();turn truern falseupSpecifier[U] ::empty]?` GroupName[?U]egexp_groupSpecifier = function(state) {state.eat(0x3F /* ? */)) { (this.regexp_eatGroupName(state)) {if (state.groupNames.indexOf(state.lastStringValue) !== -1) {  state.raise(\"Duplicate capture group name\");}state.groupNames.push(state.lastStringValue);returnate.raise(\"Invalid group\");upName[U] ::<` RegExpIdentifierName[?U] `>`e: this updates `state.lastStringValue` property with the eaten name.egexp_eatGroupName = function(state) {e.lastStringValue = \"\";state.eat(0x3C /* < */)) { (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */)) {return trueate.raise(\"Invalid capture group name\");rn falseExpIdentifierName[U] ::egExpIdentifierStart[?U]egExpIdentifierName[?U] RegExpIdentifierPart[?U]e: this updates `state.lastStringValue` property with the eaten name.egexp_eatRegExpIdentifierName = function(state) {e.lastStringValue = \"\";this.regexp_eatRegExpIdentifierStart(state)) {ate.lastStringValue += codePointToString(state.lastIntValue);ile (this.regexp_eatRegExpIdentifierPart(state)) {state.lastStringValue += codePointToString(state.lastIntValue);turn truern falseExpIdentifierStart[U] ::nicodeIDStart$`_`\\` RegExpUnicodeEscapeSequence[?U]egexp_eatRegExpIdentifierStart = function(state) {start = state.pos;ch = state.current();e.advance();ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state)) { = state.lastIntValue;isRegExpIdentifierStart(ch)) {ate.lastIntValue = ch;turn truee.pos = start;rn falseon isRegExpIdentifierStart(ch) {rn isIdentifierStart(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ExpIdentifierPart[U] ::nicodeIDContinue$`_`\\` RegExpUnicodeEscapeSequence[?U]ZWNJ>ZWJ>egexp_eatRegExpIdentifierPart = function(state) {start = state.pos;ch = state.current();e.advance();ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state)) { = state.lastIntValue;isRegExpIdentifierPart(ch)) {ate.lastIntValue = ch;turn truee.pos = start;rn falseon isRegExpIdentifierPart(ch) {rn isIdentifierChar(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */ps://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscapeegexp_eatAtomEscape = function(state) {is.regexp_eatBackReference(state) ||is.regexp_eatCharacterClassEscape(state) ||is.regexp_eatCharacterEscape(state) ||tate.switchN && this.regexp_eatKGroupName(state))turn truestate.switchU) { Make the same message as V8. (state.current() === 0x63 /* c */) {state.raise(\"Invalid unicode escape\");ate.raise(\"Invalid escape\");rn falseegexp_eatBackReference = function(state) {start = state.pos;this.regexp_eatDecimalEscape(state)) {r n = state.lastIntValue; (state.switchU) {// For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescapeif (n > state.maxBackReference) {  state.maxBackReference = n;}return true (n <= state.numCapturingParens) {return trueate.pos = start;rn falseegexp_eatKGroupName = function(state) {state.eat(0x6B /* k */)) { (this.regexp_eatGroupName(state)) {state.backReferenceNames.push(state.lastStringValue);return trueate.raise(\"Invalid named reference\");rn falseps://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscapeegexp_eatCharacterEscape = function(state) {rn (is.regexp_eatControlEscape(state) ||is.regexp_eatCControlLetter(state) ||is.regexp_eatZero(state) ||is.regexp_eatHexEscapeSequence(state) ||is.regexp_eatRegExpUnicodeEscapeSequence(state) ||state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||is.regexp_eatIdentityEscape(state)egexp_eatCControlLetter = function(state) {start = state.pos;state.eat(0x63 /* c */)) { (this.regexp_eatControlLetter(state)) {return trueate.pos = start;rn falseegexp_eatZero = function(state) {state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {ate.lastIntValue = 0;ate.advance();turn truern falseps://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscapeegexp_eatControlEscape = function(state) {ch = state.current();ch === 0x74 /* t */) {ate.lastIntValue = 0x09; /* \\t */ate.advance();turn truech === 0x6E /* n */) {ate.lastIntValue = 0x0A; /* \\n */ate.advance();turn truech === 0x76 /* v */) {ate.lastIntValue = 0x0B; /* \\v */ate.advance();turn truech === 0x66 /* f */) {ate.lastIntValue = 0x0C; /* \\f */ate.advance();turn truech === 0x72 /* r */) {ate.lastIntValue = 0x0D; /* \\r */ate.advance();turn truern falseps://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetteregexp_eatControlLetter = function(state) {ch = state.current();isControlLetter(ch)) {ate.lastIntValue = ch % 0x20;ate.advance();turn truern falseon isControlLetter(ch) {rn (h >= 0x41 /* A */ && ch <= 0x5A /* Z */) ||h >= 0x61 /* a */ && ch <= 0x7A /* z */)ps://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequenceegexp_eatRegExpUnicodeEscapeSequence = function(state) {start = state.pos;state.eat(0x75 /* u */)) { (this.regexp_eatFixedHexDigits(state, 4)) {var lead = state.lastIntValue;if (state.switchU && lead >= 0xD800 && lead <= 0xDBFF) {  var leadSurrogateEnd = state.pos;  if (state.eat(0x5C /* \\ */) && state.eat(0x75 /* u */) && this.regexp_eatFixedHexDigits(state, 4)) {    var trail = state.lastIntValue;    if (trail >= 0xDC00 && trail <= 0xDFFF) {      state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;      return true    }  }  state.pos = leadSurrogateEnd;  state.lastIntValue = lead;}return true (state.switchU &&state.eat(0x7B /* { */) &&this.regexp_eatHexDigits(state) &&state.eat(0x7D /* } */) &&isValidUnicode(state.lastIntValue){return true (state.switchU) {state.raise(\"Invalid unicode escape\");ate.pos = start;rn falseon isValidUnicode(ch) {rn ch >= 0 && ch <= 0x10FFFFps://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscapeegexp_eatIdentityEscape = function(state) {state.switchU) { (this.regexp_eatSyntaxCharacter(state)) {return true (state.eat(0x2F /* / */)) {state.lastIntValue = 0x2F; /* / */return trueturn falsech = state.current();ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6B /* k */)) {ate.lastIntValue = ch;ate.advance();turn truern falseps://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscapeegexp_eatDecimalEscape = function(state) {e.lastIntValue = 0;ch = state.current();ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) { {state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);state.advance();while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)turn truern falseps://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscapeegexp_eatCharacterClassEscape = function(state) {ch = state.current();isCharacterClassEscape(ch)) {ate.lastIntValue = -1;ate.advance();turn trueate.switchU &&is.options.ecmaVersion >= 9 &&h === 0x50 /* P */ || ch === 0x70 /* p */)ate.lastIntValue = -1;ate.advance(); (state.eat(0x7B /* { */) &&this.regexp_eatUnicodePropertyValueExpression(state) &&state.eat(0x7D /* } */){return trueate.raise(\"Invalid property name\");rn falseon isCharacterClassEscape(ch) {rn ( === 0x64 /* d */ || === 0x44 /* D */ || === 0x73 /* s */ || === 0x53 /* S */ || === 0x77 /* w */ || === 0x57 /* W */codePropertyValueExpression ::nicodePropertyName `=` UnicodePropertyValueoneUnicodePropertyNameOrValueegexp_eatUnicodePropertyValueExpression = function(state) {start = state.pos;nicodePropertyName `=` UnicodePropertyValuethis.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */)) {r name = state.lastStringValue; (this.regexp_eatUnicodePropertyValue(state)) {var value = state.lastStringValue;this.regexp_validateUnicodePropertyNameAndValue(state, name, value);return truee.pos = start;oneUnicodePropertyNameOrValuethis.regexp_eatLoneUnicodePropertyNameOrValue(state)) {r nameOrValue = state.lastStringValue;is.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);turn truern falseegexp_validateUnicodePropertyNameAndValue = function(state, name, value) {!has(state.unicodeProperties.nonBinary, name))state.raise(\"Invalid property name\"); }!state.unicodeProperties.nonBinary[name].test(value))state.raise(\"Invalid property value\"); }egexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {!state.unicodeProperties.binary.test(nameOrValue))state.raise(\"Invalid property name\"); }codePropertyName ::nicodePropertyNameCharactersegexp_eatUnicodePropertyName = function(state) {ch = 0;e.lastStringValue = \"\";e (isUnicodePropertyNameCharacter(ch = state.current())) {ate.lastStringValue += codePointToString(ch);ate.advance();rn state.lastStringValue !== \"\"on isUnicodePropertyNameCharacter(ch) {rn isControlLetter(ch) || ch === 0x5F /* _ */codePropertyValue ::nicodePropertyValueCharactersegexp_eatUnicodePropertyValue = function(state) {ch = 0;e.lastStringValue = \"\";e (isUnicodePropertyValueCharacter(ch = state.current())) {ate.lastStringValue += codePointToString(ch);ate.advance();rn state.lastStringValue !== \"\"on isUnicodePropertyValueCharacter(ch) {rn isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)eUnicodePropertyNameOrValue ::nicodePropertyValueCharactersegexp_eatLoneUnicodePropertyNameOrValue = function(state) {rn this.regexp_eatUnicodePropertyValue(state)ps://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassegexp_eatCharacterClass = function(state) {state.eat(0x5B /* [ */)) {ate.eat(0x5E /* ^ */);is.regexp_classRanges(state); (state.eat(0x5D /* [ */)) {return true Unreachable since it threw \"unterminated regular expression\" error before.ate.raise(\"Unterminated character class\");rn falseps://www.ecma-international.org/ecma-262/8.0/#prod-ClassRangesps://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesps://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDashegexp_classRanges = function(state) {e (this.regexp_eatClassAtom(state)) {r left = state.lastIntValue; (state.eat(0x2D /* - */) && this.regexp_eatClassAtom(state)) {var right = state.lastIntValue;if (state.switchU && (left === -1 || right === -1)) {  state.raise(\"Invalid character class\");}if (left !== -1 && right !== -1 && left > right) {  state.raise(\"Range out of order in character class\");}ps://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomps://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDashegexp_eatClassAtom = function(state) {start = state.pos;state.eat(0x5C /* \\ */)) { (this.regexp_eatClassEscape(state)) {return true (state.switchU) {// Make the same message as V8.var ch$1 = state.current();if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {  state.raise(\"Invalid class escape\");}state.raise(\"Invalid escape\");ate.pos = start;ch = state.current();ch !== 0x5D /* [ */) {ate.lastIntValue = ch;ate.advance();turn truern falseps://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscapeegexp_eatClassEscape = function(state) {start = state.pos;state.eat(0x62 /* b */)) {ate.lastIntValue = 0x08; /* <BS> */turn truestate.switchU && state.eat(0x2D /* - */)) {ate.lastIntValue = 0x2D; /* - */turn true!state.switchU && state.eat(0x63 /* c */)) { (this.regexp_eatClassControlLetter(state)) {return trueate.pos = start;rn (is.regexp_eatCharacterClassEscape(state) ||is.regexp_eatCharacterEscape(state)ps://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetteregexp_eatClassControlLetter = function(state) {ch = state.current();isDecimalDigit(ch) || ch === 0x5F /* _ */) {ate.lastIntValue = ch % 0x20;ate.advance();turn truern falseps://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequenceegexp_eatHexEscapeSequence = function(state) {start = state.pos;state.eat(0x78 /* x */)) { (this.regexp_eatFixedHexDigits(state, 2)) {return true (state.switchU) {state.raise(\"Invalid escape\");ate.pos = start;rn falseps://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigitsegexp_eatDecimalDigits = function(state) {start = state.pos;ch = 0;e.lastIntValue = 0;e (isDecimalDigit(ch = state.current())) {ate.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);ate.advance();rn state.pos !== starton isDecimalDigit(ch) {rn ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */ps://www.ecma-international.org/ecma-262/8.0/#prod-HexDigitsegexp_eatHexDigits = function(state) {start = state.pos;ch = 0;e.lastIntValue = 0;e (isHexDigit(ch = state.current())) {ate.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);ate.advance();rn state.pos !== starton isHexDigit(ch) {rn (h >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) ||h >= 0x41 /* A */ && ch <= 0x46 /* F */) ||h >= 0x61 /* a */ && ch <= 0x66 /* f */)on hexToInt(ch) {ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {turn 10 + (ch - 0x41 /* A */)ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {turn 10 + (ch - 0x61 /* a */)rn ch - 0x30 /* 0 */ps://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequenceows only 0-377(octal) i.e. 0-255(decimal).egexp_eatLegacyOctalEscapeSequence = function(state) {this.regexp_eatOctalDigit(state)) {r n1 = state.lastIntValue; (this.regexp_eatOctalDigit(state)) {var n2 = state.lastIntValue;if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {  state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;} else {  state.lastIntValue = n1 * 8 + n2;}else {state.lastIntValue = n1;turn truern falseps://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigitegexp_eatOctalDigit = function(state) {ch = state.current();isOctalDigit(ch)) {ate.lastIntValue = ch - 0x30; /* 0 */ate.advance();turn truee.lastIntValue = 0;rn falseon isOctalDigit(ch) {rn ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */ps://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digitsps://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequenceegexp_eatFixedHexDigits = function(state, length) {start = state.pos;e.lastIntValue = 0;(var i = 0; i < length; ++i) {r ch = state.current(); (!isHexDigit(ch)) {state.pos = start;return falseate.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);ate.advance();rn trueect type used to represent tokens. Note that normally, tokensply exist as properties on the parser object. This is onlyd for the onToken callback and the external tokenizer.ken = function Token(p) {.type = p.type;.value = p.value;.start = p.start;.end = p.end;p.options.locations)this.loc = new SourceLocation(p, p.startLoc, p.endLoc); }p.options.ranges)this.range = [p.start, p.end]; }Tokenizer$9 = Parser.prototype;e to the next tokenext = function() {this.options.onToken)this.options.onToken(new Token(this)); }.lastTokEnd = this.end;.lastTokStart = this.start;.lastTokEndLoc = this.endLoc;.lastTokStartLoc = this.startLoc;.nextToken();etToken = function() {.next();rn new Token(this)we're in an ES6 environment, make parsers iterablepeof Symbol !== \"undefined\")$9[Symbol.iterator] = function() {r this$1 = this;turn {next: function () {  var token = this$1.getToken();  return {    done: token.type === types.eof,    value: token  }}gle strict mode. Re-reads the next number or string to pleaseantic tests (`\"use strict\"; 010;` should fail).urContext = function() {rn this.context[this.context.length - 1]d a single token, updating the parser object's token-relatedperties.extToken = function() {curContext = this.curContext();!curContext || !curContext.preserveSpace) { this.skipSpace(); }.start = this.pos;this.options.locations) { this.startLoc = this.curPosition(); }this.pos >= this.input.length) { return this.finishToken(types.eof) }curContext.override) { return curContext.override(this) } { this.readToken(this.fullCharCodeAtPos()); }eadToken = function(code) {dentifier or keyword. '\\uXXXX' sequences are allowed indentifiers, so '\\' also dispatches to that.isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)return this.readWord() }rn this.getTokenFromCode(code)ullCharCodeAtPos = function() {code = this.input.charCodeAt(this.pos);code <= 0xd7ff || code >= 0xe000) { return code }next = this.input.charCodeAt(this.pos + 1);rn (code << 10) + next - 0x35fdc00kipBlockComment = function() {startLoc = this.options.onComment && this.curPosition();start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2);end === -1) { this.raise(this.pos - 2, \"Unterminated comment\"); }.pos = end + 2;this.options.locations) {neBreakG.lastIndex = start;r match;ile ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {++this.curLine;this.lineStart = match.index + match[0].length;this.options.onComment)this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,                     startLoc, this.curPosition()); }kipLineComment = function(startSkip) {start = this.pos;startLoc = this.options.onComment && this.curPosition();ch = this.input.charCodeAt(this.pos += startSkip);e (this.pos < this.input.length && !isNewLine(ch)) { = this.input.charCodeAt(++this.pos);this.options.onComment)this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,                     startLoc, this.curPosition()); }led at the start of the parse and after every token. Skipstespace and comments, and.kipSpace = function() {: while (this.pos < this.input.length) {r ch = this.input.charCodeAt(this.pos);itch (ch) {se 32: case 160: // ' '++this.pos;breakse 13:if (this.input.charCodeAt(this.pos + 1) === 10) {  ++this.pos;}se 10: case 8232: case 8233:++this.pos;if (this.options.locations) {  ++this.curLine;  this.lineStart = this.pos;}breakse 47: // '/'switch (this.input.charCodeAt(this.pos + 1)) {case 42: // '*'  this.skipBlockComment();  breakcase 47:  this.skipLineComment(2);  breakdefault:  break loop}breakfault:if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {  ++this.pos;} else {  break loop}led at the end of every token. Sets `end`, `val`, andntains `context` and `exprAllowed`, and skips the space after token, so that the next one's `start` will point at theht position.inishToken = function(type, val) {.end = this.pos;this.options.locations) { this.endLoc = this.curPosition(); }prevType = this.type;.type = type;.value = val;.updateContext(prevType); Token readings is the function that is called to fetch the next token. Itsomewhat obscure, because it works in character codes rathern characters, and because operator parsing has been inlinedo it. in the name of speed.eadToken_dot = function() {next = this.input.charCodeAt(this.pos + 1);next >= 48 && next <= 57) { return this.readNumber(true) }next2 = this.input.charCodeAt(this.pos + 2);this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'is.pos += 3;turn this.finishToken(types.ellipsis)se {this.pos;turn this.finishToken(types.dot)eadToken_slash = function() { // '/'next = this.input.charCodeAt(this.pos + 1);this.exprAllowed) { ++this.pos; return this.readRegexp() }next === 61) { return this.finishOp(types.assign, 2) }rn this.finishOp(types.slash, 1)eadToken_mult_modulo_exp = function(code) { // '%*'next = this.input.charCodeAt(this.pos + 1);size = 1;tokentype = code === 42 ? types.star : types.modulo;xponentiation operator ** and **=this.options.ecmaVersion >= 7 && code === 42 && next === 42) {size;kentype = types.starstar;xt = this.input.charCodeAt(this.pos + 2);next === 61) { return this.finishOp(types.assign, size + 1) }rn this.finishOp(tokentype, size)eadToken_pipe_amp = function(code) { // '|&'next = this.input.charCodeAt(this.pos + 1);next === code) { return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2) }next === 61) { return this.finishOp(types.assign, 2) }rn this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1)eadToken_caret = function() { // '^'next = this.input.charCodeAt(this.pos + 1);next === 61) { return this.finishOp(types.assign, 2) }rn this.finishOp(types.bitwiseXOR, 1)eadToken_plus_min = function(code) { // '+-'next = this.input.charCodeAt(this.pos + 1);next === code) { (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 &&  (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {// A `-->` line commentthis.skipLineComment(3);this.skipSpace();return this.nextToken()turn this.finishOp(types.incDec, 2)next === 61) { return this.finishOp(types.assign, 2) }rn this.finishOp(types.plusMin, 1)eadToken_lt_gt = function(code) { // '<>'next = this.input.charCodeAt(this.pos + 1);size = 1;next === code) {ze = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2; (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types.assign, size + 1) }turn this.finishOp(types.bitShift, size)next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 &&this.input.charCodeAt(this.pos + 3) === 45) { `<!--`, an XML-style comment that should be interpreted as a line commentis.skipLineComment(4);is.skipSpace();turn this.nextToken()next === 61) { size = 2; }rn this.finishOp(types.relational, size)eadToken_eq_excl = function(code) { // '=!'next = this.input.charCodeAt(this.pos + 1);next === 61) { return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'is.pos += 2;turn this.finishToken(types.arrow)rn this.finishOp(code === 61 ? types.eq : types.prefix, 1)etTokenFromCode = function(code) {ch (code) {he interpretation of a dot depends on whether it is followedy a digit or another two dots. 46: // '.'turn this.readToken_dot()unctuation tokens. 40: ++this.pos; return this.finishToken(types.parenL) 41: ++this.pos; return this.finishToken(types.parenR) 59: ++this.pos; return this.finishToken(types.semi) 44: ++this.pos; return this.finishToken(types.comma) 91: ++this.pos; return this.finishToken(types.bracketL) 93: ++this.pos; return this.finishToken(types.bracketR) 123: ++this.pos; return this.finishToken(types.braceL) 125: ++this.pos; return this.finishToken(types.braceR) 58: ++this.pos; return this.finishToken(types.colon) 63: ++this.pos; return this.finishToken(types.question) 96: // '`' (this.options.ecmaVersion < 6) { break }this.pos;turn this.finishToken(types.backQuote) 48: // '0'r next = this.input.charCodeAt(this.pos + 1); (next === 120 || next === 88) { return this.readRadixNumber(16) } // '0x', '0X' - hex number (this.options.ecmaVersion >= 6) {if (next === 111 || next === 79) { return this.readRadixNumber(8) } // '0o', '0O' - octal numberif (next === 98 || next === 66) { return this.readRadixNumber(2) } // '0b', '0B' - binary numbernything else beginning with a digit is an integer, octalumber, or float. 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9turn this.readNumber(false)uotes produce strings. 34: case 39: // '\"', \"'\"turn this.readString(code)perators are parsed inline in tiny state machines. '=' (61) isften referred to. `finishOp` simply skips the amount ofharacters it is given as second argument, and returns a tokenf the type given by its first argument. 47: // '/'turn this.readToken_slash() 37: case 42: // '%*'turn this.readToken_mult_modulo_exp(code) 124: case 38: // '|&'turn this.readToken_pipe_amp(code) 94: // '^'turn this.readToken_caret() 43: case 45: // '+-'turn this.readToken_plus_min(code) 60: case 62: // '<>'turn this.readToken_lt_gt(code) 61: case 33: // '=!'turn this.readToken_eq_excl(code) 126: // '~'turn this.finishOp(types.prefix, 1).raise(this.pos, \"Unexpected character '\" + codePointToString$1(code) + \"'\");inishOp = function(type, size) {str = this.input.slice(this.pos, this.pos + size);.pos += size;rn this.finishToken(type, str)eadRegexp = function() {escaped, inClass, start = this.pos;(;;) { (this.pos >= this.input.length) { this.raise(start, \"Unterminated regular expression\"); }r ch = this.input.charAt(this.pos); (lineBreak.test(ch)) { this.raise(start, \"Unterminated regular expression\"); } (!escaped) {if (ch === \"[\") { inClass = true; }else if (ch === \"]\" && inClass) { inClass = false; }else if (ch === \"/\" && !inClass) { break }escaped = ch === \"\\\\\";else { escaped = false; }this.pos;pattern = this.input.slice(start, this.pos);is.pos;flagsStart = this.pos;flags = this.readWord1();this.containsEsc) { this.unexpected(flagsStart); }alidate patternstate = this.regexpState || (this.regexpState = new RegExpValidationState(this));e.reset(start, pattern, flags);.validateRegExpFlags(state);.validateRegExpPattern(state);reate Literal#value property value.value = null;{lue = new RegExp(pattern, flags);tch (e) { ESTree requires null if it failed to instantiate RegExp object. https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteralrn this.finishToken(types.regexp, {pattern: pattern, flags: flags, value: value})d an integer in the given radix. Return null if zero digitse read, the integer value otherwise. When `len` is given, thisl return `null` unless the integer has exactly `len` digits.eadInt = function(radix, len) {start = this.pos, total = 0;(var i = 0, e = len == null ? Infinity : len; i < e; ++i) {r code = this.input.charCodeAt(this.pos), val = (void 0); (code >= 97) { val = code - 97 + 10; } // ase if (code >= 65) { val = code - 65 + 10; } // Ase if (code >= 48 && code <= 57) { val = code - 48; } // 0-9se { val = Infinity; } (val >= radix) { break }this.pos;tal = total * radix + val;this.pos === start || len != null && this.pos - start !== len) { return null }rn totaleadRadixNumber = function(radix) {start = this.pos;.pos += 2; // 0xval = this.readInt(radix);val == null) { this.raise(this.start + 2, \"Expected number in radix \" + radix); }this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {l = typeof BigInt !== \"undefined\" ? BigInt(this.input.slice(start, this.pos)) : null;this.pos;se if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }rn this.finishToken(types.num, val)d an integer, octal integer, or floating-point number.eadNumber = function(startsWithDot) {start = this.pos;!startsWithDot && this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;octal && this.strict) { this.raise(start, \"Invalid number\"); }octal && /[89]/.test(this.input.slice(start, this.pos))) { octal = false; }next = this.input.charCodeAt(this.pos);!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {r str$1 = this.input.slice(start, this.pos);r val$1 = typeof BigInt !== \"undefined\" ? BigInt(str$1) : null;this.pos; (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }turn this.finishToken(types.num, val$1)next === 46 && !octal) { // '.'this.pos;is.readInt(10);xt = this.input.charCodeAt(this.pos);(next === 69 || next === 101) && !octal) { // 'eE'xt = this.input.charCodeAt(++this.pos); (next === 43 || next === 45) { ++this.pos; } // '+-' (this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }str = this.input.slice(start, this.pos);val = octal ? parseInt(str, 8) : parseFloat(str);rn this.finishToken(types.num, val)d a string value, interpreting backslash-escapes.eadCodePoint = function() {ch = this.input.charCodeAt(this.pos), code;ch === 123) { // '{' (this.options.ecmaVersion < 6) { this.unexpected(); }r codePos = ++this.pos;de = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos);this.pos; (code > 0x10FFFF) { this.invalidStringToken(codePos, \"Code point out of bounds\"); }se {de = this.readHexChar(4);rn codeon codePointToString$1(code) {TF-16 Decodingcode <= 0xFFFF) { return String.fromCharCode(code) } -= 0x10000;rn String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)eadString = function(quote) {out = \"\", chunkStart = ++this.pos;(;;) { (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated string constant\"); }r ch = this.input.charCodeAt(this.pos); (ch === quote) { break } (ch === 92) { // '\\'out += this.input.slice(chunkStart, this.pos);out += this.readEscapedChar(false);chunkStart = this.pos;else {if (isNewLine(ch, this.options.ecmaVersion >= 10)) { this.raise(this.start, \"Unterminated string constant\"); }++this.pos;+= this.input.slice(chunkStart, this.pos++);rn this.finishToken(types.string, out)ds template string tokens.VALID_TEMPLATE_ESCAPE_ERROR = {};ryReadTemplateToken = function() {.inTemplateElement = true;{is.readTmplToken();tch (err) { (err === INVALID_TEMPLATE_ESCAPE_ERROR) {this.readInvalidTemplateToken();else {throw err.inTemplateElement = false;nvalidStringToken = function(position, message) {this.inTemplateElement && this.options.ecmaVersion >= 9) {row INVALID_TEMPLATE_ESCAPE_ERRORse {is.raise(position, message);eadTmplToken = function() {out = \"\", chunkStart = this.pos;(;;) { (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated template\"); }r ch = this.input.charCodeAt(this.pos); (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) { // '`', '${'if (this.pos === this.start && (this.type === types.template || this.type === types.invalidTemplate)) {  if (ch === 36) {    this.pos += 2;    return this.finishToken(types.dollarBraceL)  } else {    ++this.pos;    return this.finishToken(types.backQuote)  }}out += this.input.slice(chunkStart, this.pos);return this.finishToken(types.template, out) (ch === 92) { // '\\'out += this.input.slice(chunkStart, this.pos);out += this.readEscapedChar(true);chunkStart = this.pos;else if (isNewLine(ch)) {out += this.input.slice(chunkStart, this.pos);++this.pos;switch (ch) {case 13:  if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; }case 10:  out += \"\\n\";  breakdefault:  out += String.fromCharCode(ch);  break}if (this.options.locations) {  ++this.curLine;  this.lineStart = this.pos;}chunkStart = this.pos;else {++this.pos;ds a template token to search for the end, without validating any escape sequenceseadInvalidTemplateToken = function() {(; this.pos < this.input.length; this.pos++) {itch (this.input[this.pos]) {se \"\\\\\":++this.pos;breakse \"$\":if (this.input[this.pos + 1] !== \"{\") {  break} falls throughse \"`\":return this.finishToken(types.invalidTemplate, this.input.slice(this.start, this.pos)) no default.raise(this.start, \"Unterminated template\");d to read escaped characterseadEscapedChar = function(inTemplate) {ch = this.input.charCodeAt(++this.pos);is.pos;ch (ch) { 110: return \"\\n\" // 'n' -> '\\n' 114: return \"\\r\" // 'r' -> '\\r' 120: return String.fromCharCode(this.readHexChar(2)) // 'x' 117: return codePointToString$1(this.readCodePoint()) // 'u' 116: return \"\\t\" // 't' -> '\\t' 98: return \"\\b\" // 'b' -> '\\b' 118: return \"\\u000b\" // 'v' -> '\\u000b' 102: return \"\\f\" // 'f' -> '\\f' 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } // '\\r\\n' 10: // ' \\n' (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }turn \"\"ult: (ch >= 48 && ch <= 55) {var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];var octal = parseInt(octalStr, 8);if (octal > 255) {  octalStr = octalStr.slice(0, -1);  octal = parseInt(octalStr, 8);}this.pos += octalStr.length - 1;ch = this.input.charCodeAt(this.pos);if ((octalStr !== \"0\" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {  this.invalidStringToken(    this.pos - 1 - octalStr.length,    inTemplate      ? \"Octal literal in template string\"      : \"Octal literal in strict mode\"  );}return String.fromCharCode(octal) (isNewLine(ch)) {// Unicode new line characters after \\ get removed from output in both// template literals and stringsreturn \"\"turn String.fromCharCode(ch)d to read character escape sequences ('\\x', '\\u', '\\U').eadHexChar = function(len) {codePos = this.pos;n = this.readInt(16, len);n === null) { this.invalidStringToken(codePos, \"Bad character escape sequence\"); }rn nd an identifier, and return it as a string. Sets `this.containsEsc`whether the word contained a '\\u' escape.rementally adds only escaped chars, adding other chunks as-isa micro-optimization.eadWord1 = function() {.containsEsc = false;word = \"\", first = true, chunkStart = this.pos;astral = this.options.ecmaVersion >= 6;e (this.pos < this.input.length) {r ch = this.fullCharCodeAtPos(); (isIdentifierChar(ch, astral)) {this.pos += ch <= 0xffff ? 1 : 2;else if (ch === 92) { // \"\\\"this.containsEsc = true;word += this.input.slice(chunkStart, this.pos);var escStart = this.pos;if (this.input.charCodeAt(++this.pos) !== 117) // \"u\"  { this.invalidStringToken(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\"); }++this.pos;var esc = this.readCodePoint();if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))  { this.invalidStringToken(escStart, \"Invalid Unicode escape\"); }word += codePointToString$1(esc);chunkStart = this.pos;else {breakrst = false;rn word + this.input.slice(chunkStart, this.pos)d an identifier or keyword token. Will check for reservedds when necessary.eadWord = function() {word = this.readWord1();type = types.name;this.keywords.test(word)) { (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + word); }pe = keywords$1[word];rn this.finishToken(type, word)rn is a tiny, fast JavaScript parser written in JavaScript.rsion = \"7.1.0\";.acorn = {er: Parser,ion: version,ultOptions: defaultOptions,tion: Position,ceLocation: SourceLocation,ineInfo: getLineInfo,: Node,nType: TokenType,ypes: types,ordTypes: keywords$1,ontext: TokContext,ontexts: types$1,entifierChar: isIdentifierChar,entifierStart: isIdentifierStart,n: Token,wLine: isNewLine,Break: lineBreak,BreakG: lineBreakG,SCIIwhitespace: nonASCIIwhitespace main exported interface (under `self.acorn` when in thewser) is a `parse` function that takes a code string andurns an abstract syntax tree as specified by [Mozilla parser][api].i]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_APIon parse(input, options) {rn Parser.parse(input, options)s function tries to parse a single expression at a givenset in a string. Useful for parsing mixed-language formatst embed JavaScript expressions.on parseExpressionAt(input, pos, options) {rn Parser.parseExpressionAt(input, pos, options)rn is organized as a tokenizer and a recursive-descent parser. `tokenizer` export provides an interface to the tokenizer.on tokenizer(input, options) {rn Parser.tokenizer(input, options)s.Node = Node;s.Parser = Parser;s.Position = Position;s.SourceLocation = SourceLocation;s.TokContext = TokContext;s.Token = Token;s.TokenType = TokenType;s.defaultOptions = defaultOptions;s.getLineInfo = getLineInfo;s.isIdentifierChar = isIdentifierChar;s.isIdentifierStart = isIdentifierStart;s.isNewLine = isNewLine;s.keywordTypes = keywords$1;s.lineBreak = lineBreak;s.lineBreakG = lineBreakG;s.nonASCIIwhitespace = nonASCIIwhitespace;s.parse = parse;s.parseExpressionAt = parseExpressionAt;s.tokContexts = types$1;s.tokTypes = types;s.tokenizer = tokenizer;s.version = version;.defineProperty(exports, '__esModule', { value: true });"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"151","column":"10"},"end":{"line":"151","column":"42"},"code":"new TokenType(\"num\", startsExpr),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"152","column":"13"},"end":{"line":"152","column":"48"},"code":"new TokenType(\"regexp\", startsExpr),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"153","column":"13"},"end":{"line":"153","column":"48"},"code":"new TokenType(\"string\", startsExpr),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"154","column":"11"},"end":{"line":"154","column":"44"},"code":"new TokenType(\"name\", startsExpr),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"155","column":"10"},"end":{"line":"155","column":"30"},"code":"new TokenType(\"eof\"),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"158","column":"15"},"end":{"line":"158","column":"71"},"code":"new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"159","column":"15"},"end":{"line":"159","column":"33"},"code":"new TokenType(\"]\"),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"160","column":"13"},"end":{"line":"160","column":"69"},"code":"new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"161","column":"13"},"end":{"line":"161","column":"31"},"code":"new TokenType(\"}\"),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"162","column":"13"},"end":{"line":"162","column":"69"},"code":"new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"163","column":"13"},"end":{"line":"163","column":"31"},"code":"new TokenType(\")\"),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"164","column":"12"},"end":{"line":"164","column":"42"},"code":"new TokenType(\",\", beforeExpr),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"165","column":"11"},"end":{"line":"165","column":"41"},"code":"new TokenType(\";\", beforeExpr),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"166","column":"12"},"end":{"line":"166","column":"42"},"code":"new TokenType(\":\", beforeExpr),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"167","column":"10"},"end":{"line":"167","column":"28"},"code":"new TokenType(\".\"),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"168","column":"15"},"end":{"line":"168","column":"45"},"code":"new TokenType(\"?\", beforeExpr),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"169","column":"12"},"end":{"line":"169","column":"43"},"code":"new TokenType(\"=>\", beforeExpr),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"170","column":"15"},"end":{"line":"170","column":"40"},"code":"new TokenType(\"template\"),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"171","column":"22"},"end":{"line":"171","column":"54"},"code":"new TokenType(\"invalidTemplate\"),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"172","column":"15"},"end":{"line":"172","column":"47"},"code":"new TokenType(\"...\", beforeExpr),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"173","column":"16"},"end":{"line":"173","column":"46"},"code":"new TokenType(\"`\", startsExpr),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"174","column":"19"},"end":{"line":"174","column":"76"},"code":"new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"190","column":"9"},"end":{"line":"190","column":"63"},"code":"new TokenType(\"=\", {beforeExpr: true, isAssign: true}),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"191","column":"13"},"end":{"line":"191","column":"68"},"code":"new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"192","column":"13"},"end":{"line":"192","column":"84"},"code":"new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"193","column":"13"},"end":{"line":"193","column":"85"},"code":"new TokenType(\"!/~\", {beforeExpr: true, prefix: true, startsExpr: true}),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"194","column":"16"},"end":{"line":"194","column":"30"},"code":"binop(\"||\", 1),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"133","column":"3"},"end":{"line":"135","column":"4"},"code":"function binop(name, prec) {  return new TokenType(name, {beforeExpr: true, binop: prec})}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"134","column":"12"},"end":{"line":"134","column":"64"},"code":"new TokenType(name, {beforeExpr: true, binop: prec})"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"195","column":"17"},"end":{"line":"195","column":"31"},"code":"binop(\"&&\", 2),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"133","column":"3"},"end":{"line":"135","column":"4"},"code":"function binop(name, prec) {  return new TokenType(name, {beforeExpr: true, binop: prec})}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"196","column":"16"},"end":{"line":"196","column":"29"},"code":"binop(\"|\", 3),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"133","column":"3"},"end":{"line":"135","column":"4"},"code":"function binop(name, prec) {  return new TokenType(name, {beforeExpr: true, binop: prec})}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"197","column":"17"},"end":{"line":"197","column":"30"},"code":"binop(\"^\", 4),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"133","column":"3"},"end":{"line":"135","column":"4"},"code":"function binop(name, prec) {  return new TokenType(name, {beforeExpr: true, binop: prec})}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"198","column":"17"},"end":{"line":"198","column":"30"},"code":"binop(\"&\", 5),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"133","column":"3"},"end":{"line":"135","column":"4"},"code":"function binop(name, prec) {  return new TokenType(name, {beforeExpr: true, binop: prec})}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"199","column":"15"},"end":{"line":"199","column":"40"},"code":"binop(\"==/!=/===/!==\", 6),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"133","column":"3"},"end":{"line":"135","column":"4"},"code":"function binop(name, prec) {  return new TokenType(name, {beforeExpr: true, binop: prec})}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"200","column":"17"},"end":{"line":"200","column":"38"},"code":"binop(\"</>/<=/>=\", 7),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"133","column":"3"},"end":{"line":"135","column":"4"},"code":"function binop(name, prec) {  return new TokenType(name, {beforeExpr: true, binop: prec})}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"201","column":"15"},"end":{"line":"201","column":"36"},"code":"binop(\"<</>>/>>>\", 8),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"133","column":"3"},"end":{"line":"135","column":"4"},"code":"function binop(name, prec) {  return new TokenType(name, {beforeExpr: true, binop: prec})}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"202","column":"14"},"end":{"line":"202","column":"96"},"code":"new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"203","column":"13"},"end":{"line":"203","column":"27"},"code":"binop(\"%\", 10),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"133","column":"3"},"end":{"line":"135","column":"4"},"code":"function binop(name, prec) {  return new TokenType(name, {beforeExpr: true, binop: prec})}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"204","column":"11"},"end":{"line":"204","column":"25"},"code":"binop(\"*\", 10),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"133","column":"3"},"end":{"line":"135","column":"4"},"code":"function binop(name, prec) {  return new TokenType(name, {beforeExpr: true, binop: prec})}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"205","column":"12"},"end":{"line":"205","column":"26"},"code":"binop(\"/\", 10),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"133","column":"3"},"end":{"line":"135","column":"4"},"code":"function binop(name, prec) {  return new TokenType(name, {beforeExpr: true, binop: prec})}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"206","column":"15"},"end":{"line":"206","column":"54"},"code":"new TokenType(\"**\", {beforeExpr: true}),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"209","column":"13"},"end":{"line":"209","column":"24"},"code":"kw(\"break\"),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"147","column":"31"},"end":{"line":"147","column":"59"},"code":"new TokenType(name, options)"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"118","column":"19"},"end":{"line":"131","column":"4"},"code":"function TokenType(label, conf) {void 0 ) conf = {};abel; conf.keyword;r = !!conf.beforeExpr;r = !!conf.startsExpr;!!conf.isLoop;= !!conf.isAssign;!!conf.prefix; !!conf.postfix;onf.binop || null;text = null;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"210","column":"12"},"end":{"line":"210","column":"34"},"code":"kw(\"case\", beforeExpr),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"211","column":"13"},"end":{"line":"211","column":"24"},"code":"kw(\"catch\"),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"212","column":"16"},"end":{"line":"212","column":"30"},"code":"kw(\"continue\"),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"213","column":"16"},"end":{"line":"213","column":"30"},"code":"kw(\"debugger\"),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"214","column":"15"},"end":{"line":"214","column":"40"},"code":"kw(\"default\", beforeExpr),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"215","column":"10"},"end":{"line":"215","column":"52"},"code":"kw(\"do\", {isLoop: true, beforeExpr: true}),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"216","column":"12"},"end":{"line":"216","column":"34"},"code":"kw(\"else\", beforeExpr),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"217","column":"15"},"end":{"line":"217","column":"28"},"code":"kw(\"finally\"),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"218","column":"11"},"end":{"line":"218","column":"36"},"code":"kw(\"for\", {isLoop: true}),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"219","column":"16"},"end":{"line":"219","column":"42"},"code":"kw(\"function\", startsExpr),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"220","column":"10"},"end":{"line":"220","column":"18"},"code":"kw(\"if\"),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"221","column":"14"},"end":{"line":"221","column":"38"},"code":"kw(\"return\", beforeExpr),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"222","column":"14"},"end":{"line":"222","column":"26"},"code":"kw(\"switch\"),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"223","column":"13"},"end":{"line":"223","column":"36"},"code":"kw(\"throw\", beforeExpr),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"224","column":"11"},"end":{"line":"224","column":"20"},"code":"kw(\"try\"),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"225","column":"11"},"end":{"line":"225","column":"20"},"code":"kw(\"var\"),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"226","column":"13"},"end":{"line":"226","column":"24"},"code":"kw(\"const\"),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"227","column":"13"},"end":{"line":"227","column":"40"},"code":"kw(\"while\", {isLoop: true}),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"228","column":"12"},"end":{"line":"228","column":"22"},"code":"kw(\"with\"),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"229","column":"11"},"end":{"line":"229","column":"58"},"code":"kw(\"new\", {beforeExpr: true, startsExpr: true}),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"230","column":"12"},"end":{"line":"230","column":"34"},"code":"kw(\"this\", startsExpr),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"231","column":"13"},"end":{"line":"231","column":"36"},"code":"kw(\"super\", startsExpr),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"232","column":"13"},"end":{"line":"232","column":"36"},"code":"kw(\"class\", startsExpr),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"233","column":"15"},"end":{"line":"233","column":"40"},"code":"kw(\"extends\", beforeExpr),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"234","column":"14"},"end":{"line":"234","column":"26"},"code":"kw(\"export\"),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"235","column":"14"},"end":{"line":"235","column":"38"},"code":"kw(\"import\", startsExpr),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"236","column":"12"},"end":{"line":"236","column":"34"},"code":"kw(\"null\", startsExpr),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"237","column":"12"},"end":{"line":"237","column":"34"},"code":"kw(\"true\", startsExpr),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"238","column":"13"},"end":{"line":"238","column":"36"},"code":"kw(\"false\", startsExpr),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"239","column":"10"},"end":{"line":"239","column":"48"},"code":"kw(\"in\", {beforeExpr: true, binop: 7}),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"240","column":"18"},"end":{"line":"240","column":"64"},"code":"kw(\"instanceof\", {beforeExpr: true, binop: 7}),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"241","column":"14"},"end":{"line":"241","column":"78"},"code":"kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"242","column":"12"},"end":{"line":"242","column":"74"},"code":"kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"243","column":"14"},"end":{"line":"243","column":"78"},"code":"kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"143","column":"3"},"end":{"line":"148","column":"4"},"code":"function kw(name, options) {  if ( options === void 0 ) options = {};  options.keyword = name;  return keywords$1[name] = new TokenType(name, options)}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"2997","column":"13"},"end":{"line":"2997","column":"39"},"code":"new TokContext(\"{\", false),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"2988","column":"20"},"end":{"line":"2994","column":"4"},"code":"function TokContext(token, isExpr, preserveSpace, override, generator) {ken;!isExpr;ace = !!preserveSpace; override;= !!generator;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"2998","column":"13"},"end":{"line":"2998","column":"38"},"code":"new TokContext(\"{\", true),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"2988","column":"20"},"end":{"line":"2994","column":"4"},"code":"function TokContext(token, isExpr, preserveSpace, override, generator) {ken;!isExpr;ace = !!preserveSpace; override;= !!generator;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"2999","column":"13"},"end":{"line":"2999","column":"40"},"code":"new TokContext(\"${\", false),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"2988","column":"20"},"end":{"line":"2994","column":"4"},"code":"function TokContext(token, isExpr, preserveSpace, override, generator) {ken;!isExpr;ace = !!preserveSpace; override;= !!generator;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"3000","column":"13"},"end":{"line":"3000","column":"39"},"code":"new TokContext(\"(\", false),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"2988","column":"20"},"end":{"line":"2994","column":"4"},"code":"function TokContext(token, isExpr, preserveSpace, override, generator) {ken;!isExpr;ace = !!preserveSpace; override;= !!generator;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"3001","column":"13"},"end":{"line":"3001","column":"38"},"code":"new TokContext(\"(\", true),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"2988","column":"20"},"end":{"line":"2994","column":"4"},"code":"function TokContext(token, isExpr, preserveSpace, override, generator) {ken;!isExpr;ace = !!preserveSpace; override;= !!generator;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"3002","column":"13"},"end":{"line":"3002","column":"95"},"code":"new TokContext(\"`\", true, true, function (p) { return p.tryReadTemplateToken(); }),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"2988","column":"20"},"end":{"line":"2994","column":"4"},"code":"function TokContext(token, isExpr, preserveSpace, override, generator) {ken;!isExpr;ace = !!preserveSpace; override;= !!generator;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"3003","column":"13"},"end":{"line":"3003","column":"46"},"code":"new TokContext(\"function\", false),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"2988","column":"20"},"end":{"line":"2994","column":"4"},"code":"function TokContext(token, isExpr, preserveSpace, override, generator) {ken;!isExpr;ace = !!preserveSpace; override;= !!generator;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"3004","column":"13"},"end":{"line":"3004","column":"45"},"code":"new TokContext(\"function\", true),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"2988","column":"20"},"end":{"line":"2994","column":"4"},"code":"function TokContext(token, isExpr, preserveSpace, override, generator) {ken;!isExpr;ace = !!preserveSpace; override;= !!generator;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"3005","column":"17"},"end":{"line":"3005","column":"68"},"code":"new TokContext(\"function\", true, false, null, true),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"2988","column":"20"},"end":{"line":"2994","column":"4"},"code":"function TokContext(token, isExpr, preserveSpace, override, generator) {ken;!isExpr;ace = !!preserveSpace; override;= !!generator;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"3006","column":"12"},"end":{"line":"3006","column":"64"},"code":"new TokContext(\"function\", false, false, null, true)"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"2988","column":"20"},"end":{"line":"2994","column":"4"},"code":"function TokContext(token, isExpr, preserveSpace, override, generator) {ken;!isExpr;ace = !!preserveSpace; override;= !!generator;"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"3170","column":"3"},"end":{"line":"3170","column":"22"},"code":"buildUnicodeData(9);"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"3156","column":"3"},"end":{"line":"3169","column":"4"},"code":"function buildUnicodeData(ecmaVersion) {  var d = data[ecmaVersion] = {    binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + \" \" + unicodeGeneralCategoryValues),    nonBinary: {      General_Category: wordsRegexp(unicodeGeneralCategoryValues),      Script: wordsRegexp(unicodeScriptValues[ecmaVersion])    }  };  d.nonBinary.Script_Extensions = d.nonBinary.Script;  d.nonBinary.gc = d.nonBinary.General_Category;  d.nonBinary.sc = d.nonBinary.Script;  d.nonBinary.scx = d.nonBinary.Script_Extensions;}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"3158","column":"15"},"end":{"line":"3158","column":"101"},"code":"wordsRegexp(unicodeBinaryProperties[ecmaVersion] + \" \" + unicodeGeneralCategoryValues),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"274","column":"3"},"end":{"line":"276","column":"4"},"code":"function wordsRegexp(words) {  return new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\")}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"3160","column":"27"},"end":{"line":"3160","column":"68"},"code":"wordsRegexp(unicodeGeneralCategoryValues),"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"274","column":"3"},"end":{"line":"276","column":"4"},"code":"function wordsRegexp(words) {  return new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\")}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"3161","column":"17"},"end":{"line":"3161","column":"62"},"code":"wordsRegexp(unicodeScriptValues[ecmaVersion])"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"274","column":"3"},"end":{"line":"276","column":"4"},"code":"function wordsRegexp(words) {  return new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\")}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"3171","column":"3"},"end":{"line":"3171","column":"23"},"code":"buildUnicodeData(10);"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"3156","column":"3"},"end":{"line":"3169","column":"4"},"code":"function buildUnicodeData(ecmaVersion) {  var d = data[ecmaVersion] = {    binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + \" \" + unicodeGeneralCategoryValues),    nonBinary: {      General_Category: wordsRegexp(unicodeGeneralCategoryValues),      Script: wordsRegexp(unicodeScriptValues[ecmaVersion])    }  };  d.nonBinary.Script_Extensions = d.nonBinary.Script;  d.nonBinary.gc = d.nonBinary.General_Category;  d.nonBinary.sc = d.nonBinary.Script;  d.nonBinary.scx = d.nonBinary.Script_Extensions;}"}},{"caller":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"3172","column":"3"},"end":{"line":"3172","column":"23"},"code":"buildUnicodeData(11);"},"callee":{"fileName":"acorn.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/acorn/dist/acorn.js","start":{"line":"3156","column":"3"},"end":{"line":"3169","column":"4"},"code":"function buildUnicodeData(ecmaVersion) {  var d = data[ecmaVersion] = {    binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + \" \" + unicodeGeneralCategoryValues),    nonBinary: {      General_Category: wordsRegexp(unicodeGeneralCategoryValues),      Script: wordsRegexp(unicodeScriptValues[ecmaVersion])    }  };  d.nonBinary.Script_Extensions = d.nonBinary.Script;  d.nonBinary.gc = d.nonBinary.General_Category;  d.nonBinary.sc = d.nonBinary.Script;  d.nonBinary.scx = d.nonBinary.Script_Extensions;}"}},{"caller":{"fileName":"tests.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/test/tests.js","start":{"line":"10","column":"1"},"end":{"line":"32","column":"3"},"code":"test(\"import ''\", {  type: \"Program\",  start: 0,  end: 9,  body: [    {      type: \"ImportDeclaration\",      start: 0,      end: 9,      specifiers: [],      source: {        type: \"Literal\",        start: 7,        end: 9,        value: \"\",        raw: \"''\"      }    }  ]}, {  ecmaVersion: 5,  sourceType: \"module\"});"},"callee":{"fileName":"driver.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/test/driver.js","start":{"line":"3","column":"16"},"end":{"line":"5","column":"2"},"code":"function(code, ast, options) {ode: code, ast: ast, options: options});"}},{"caller":{"fileName":"tests.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/test/tests.js","start":{"line":"34","column":"1"},"end":{"line":"37","column":"3"},"code":"testFail(\"import('')\", \"Unexpected token (1:6)\", {  ecmaVersion: 5,  sourceType: \"module\"});"},"callee":{"fileName":"driver.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/test/driver.js","start":{"line":"6","column":"20"},"end":{"line":"8","column":"2"},"code":"function(code, message, options) { code, error: message, options: options});"}},{"caller":{"fileName":"tests.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/test/tests.js","start":{"line":"39","column":"1"},"end":{"line":"64","column":"3"},"code":"test(\"new Object\", {  type: \"Program\",  start: 0,  end: 10,  body: [    {      type: \"ExpressionStatement\",      start: 0,      end: 10,      expression: {        type: \"NewExpression\",        start: 0,        end: 10,        callee: {          type: \"Identifier\",          start: 4,          end: 10,          name: \"Object\"        },        arguments: []      }    }  ]}, {  allowReserved: \"never\"});"},"callee":{"fileName":"driver.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/test/driver.js","start":{"line":"3","column":"16"},"end":{"line":"5","column":"2"},"code":"function(code, ast, options) {ode: code, ast: ast, options: options});"}},{"caller":{"fileName":"tests.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/test/tests.js","start":{"line":"66","column":"1"},"end":{"line":"106","column":"3"},"code":"test(\"this\\n\", {  type: \"Program\",  body: [    {      type: \"ExpressionStatement\",      expression: {        type: \"ThisExpression\",        loc: {          start: {            line: 1,            column: 0          },          end: {            line: 1,            column: 4          }        }      },      loc: {        start: {          line: 1,          column: 0        },        end: {          line: 1,          column: 4        }      }    }  ],  loc: {    start: {      line: 1,      column: 0    },    end: {      line: 2,      column: 0    }  }});"},"callee":{"fileName":"driver.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/test/driver.js","start":{"line":"3","column":"16"},"end":{"line":"5","column":"2"},"code":"function(code, ast, options) {ode: code, ast: ast, options: options});"}},{"caller":{"fileName":"tests.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/test/tests.js","start":{"line":"108","column":"1"},"end":{"line":"149","column":"3"},"code":"test(\"null\\n\", {  type: \"Program\",  body: [    {      type: \"ExpressionStatement\",      expression: {        type: \"Literal\",        value: null,        loc: {          start: {            line: 1,            column: 0          },          end: {            line: 1,            column: 4          }        }      },      loc: {        start: {          line: 1,          column: 0        },        end: {          line: 1,          column: 4        }      }    }  ],  loc: {    start: {      line: 1,      column: 0    },    end: {      line: 2,      column: 0    }  }});"},"callee":{"fileName":"driver.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/test/driver.js","start":{"line":"3","column":"16"},"end":{"line":"5","column":"2"},"code":"function(code, ast, options) {ode: code, ast: ast, options: options});"}},{"caller":{"fileName":"tests.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/test/tests.js","start":{"line":"151","column":"1"},"end":{"line":"192","column":"3"}},"callee":{"fileName":"driver.js","fullPath":"/Users/saba/Documents/northeastern/research/nodeprof/dynamic-analysis/nodeprof.js/test/input/acorn/test/driver.js","start":{"line":"3","column":"16"},"end":{"line":"5","column":"2"}}}];